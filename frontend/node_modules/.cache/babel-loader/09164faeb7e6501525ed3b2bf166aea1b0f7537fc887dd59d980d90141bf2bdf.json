{"ast":null,"code":"import _toConsumableArray from\"C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useContext,useRef}from'react';import{useParams}from\"react-router-dom\";import AuthContext from'../context/AuthContext';import ConControls from'./ConControls';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MessageContainer=function MessageContainer(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),messageRTC=_useState2[0],setMessageRTC=_useState2[1];// Getting username from URL\nvar _useParams=useParams(),username=_useParams.username;var string=username.toString();var containerRef=useRef(null);// Creating messages var \n// Getting messages from session storage for current friend\n// If session storage doesnt have any values it means:\n// 1: Theres is no messages in current chatroom\n// 2: or it is first load of chatroom\n// in any cases above, chatroom will send to django getMessages request\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];var newestMessage=useRef({});var oldestMessage=useRef({});// CurrentMessages contains messages from every friend that were loaded in current session\nvar currentMessages=useRef({});var _useContext=useContext(AuthContext),WebSocket=_useContext.WebSocket,authToken=_useContext.authToken,user=_useContext.user;// Initializint empty list\nvar updates=[];// Checking if key 'update' exist in session storage\n// If not:\nif(sessionStorage.getItem(\"Updates\")==null){// Creating Key with empty list as value\nsessionStorage.setItem(\"Updates\",JSON.stringify(updates));}// Updating list with current values from session storage\n// so that list is up to date\nupdates=sessionStorage.getItem(\"Updates\");// functions 'useEffect()' trigges on the first load\n// and every time 'username' is updated \nuseEffect(function(){if(!currentMessages.current[\"\".concat(string)]){currentMessages.current[\"\".concat(string)]=[];}// Checking if messages are empty\nif(currentMessages.current[\"\".concat(string)].length==0){// If so, sending to django reqeust for new messages from database\ngetMessages(40,\"321\",1);}else if(updates.includes(username)){// If not and update list contains friend username\n// It means friend send to this user message\n// and message var needs to be updated \n// Removing friend from update list\nremoveFromStorage(username);// Getting new messages \n// (In Future there should be update function that will only get new messages, instead getting all messages from current chatroom) DONE\ngetMessages(20,newestMessage.current[\"\".concat(string)].created,2);}else{// else it means there was no updates/messages sent\n// so setting messages from currentMessages ref, stored before\nsetMessages(currentMessages.current[\"\".concat(string)]);}// \nvar handleScroll=function handleScroll(){if(containerRef.current.scrollTop===0){getMessages(40,oldestMessage.current[\"\".concat(string)].created,3,2);}};containerRef.current.addEventListener('scroll',handleScroll);return function(){if(containerRef.current){containerRef.current.removeEventListener('scroll',handleScroll);}};},[username]);WebSocket.onclose=function(){console.log(\"Websocket Client Disconnected\");};WebSocket.onopen=function(){console.log('WebSocket Client Connected');WebSocket.send(JSON.stringify({'message':'friend is connected','friendName':string,'type':'message_update'}));};// Listener for upcoming messages from django\n// I dont think async is required, but who knows \nWebSocket.onmessage=function(e){var data=JSON.parse(e.data);// Console logging messages for debugging\n// console.log('Data:', data)\n// console.log(JSON.parse(e.data))\nif(data.type==='friendRequest'&&data.friend!=user.username){window.location.reload();}// If user recives chat_update prompt and is from a friend \n// whos chatroom is open: update messages \nif(data.type==='chat_update'&&data.friend===string){// console.log('chat')\n// 100ms delay is required, for some bizarre reasons\n// if there is no delay, getMessages() works every 3rd time\nsetTimeout(function(){if(newestMessage.current[\"\".concat(string)]){getMessages(20,newestMessage.current[\"\".concat(string)].created,2);}else{getMessages(10,\"321\",1);}},300);// setMessageRTC(data)\n// isCalling(true)\n}else if(!updates.includes(data.friend)&&data.friend!==user.username){// If friend sent you messages \n// and that friends chatroom wasnt open\n// saving that friend username to update list \npushToStorage(data.friend);}else//if(data.type === \"init_call\" && data.friend === string)\n{// console.log(\"Your friends is calling\")\nsetMessageRTC(data);// isCalling(true)\n// isFcall(true)\n}};// Getting messages form django backend\nvar getMessages=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var count,date,mode,mode2,respone,data,_args=arguments;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:count=_args.length>0&&_args[0]!==undefined?_args[0]:1;date=_args.length>1&&_args[1]!==undefined?_args[1]:\"1987-07-18T20:59:26.076557Z\";mode=_args.length>2&&_args[2]!==undefined?_args[2]:1;mode2=_args.length>3&&_args[3]!==undefined?_args[3]:1;_context.next=6;return fetch(\"http://localhost:8000/users/rooms/\".concat(string,\"/\").concat(count,\"/\").concat(date,\"/\").concat(mode),{method:'GET',headers:{'Content-Type':'application/json','Authorization':'Bearer '+String(authToken.access)}},[]);case 6:respone=_context.sent;_context.next=9;return respone.json();case 9:data=_context.sent;// console.log(data)\n// console.log(currentMessages.current)\n// console.log(currentMessages.current[`${string}`])\n// Adding messages to currentMessage ref\naddToMessages(data,mode2);// \nsetMessages(currentMessages.current[\"\".concat(string)]);// console.log(\"newest: \" + newestMessage.current[`${string}`].created)\n// console.log(\"oldest: \" + oldestMessage.current[`${string}`].created)\ncase 12:case\"end\":return _context.stop();}},_callee);}));return function getMessages(){return _ref.apply(this,arguments);};}();// Function that adds messages to storage and \n// Keep track of newest and oldest messages\nvar addToMessages=function addToMessages(data){var mode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;// Adding new message/s to ref \n// mode 1 adding ms at the beginning of the list\n// mode 2 adding ms at the end of the list\nif(mode==1){currentMessages.current[\"\".concat(string)]=[].concat(_toConsumableArray(currentMessages.current[string]),_toConsumableArray(data));}else if(mode==2){currentMessages.current[\"\".concat(string)]=[].concat(_toConsumableArray(data),_toConsumableArray(currentMessages.current[string]));}newestMessage.current[\"\".concat(string)]=currentMessages.current[\"\".concat(string)][currentMessages.current[\"\".concat(string)].length-1];oldestMessage.current[\"\".concat(string)]=currentMessages.current[\"\".concat(string)][0];};// Sending messages to djnago\nvar sendMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:e.preventDefault();// Sending message to websocket\n// And passing friend name from url\n_context2.next=3;return fetch('http://localhost:8000/users/rooms/send/'+string,{method:'POST',headers:{'Content-Type':'application/json','Authorization':'Bearer '+String(authToken.access)},body:JSON.stringify(e.target.message.value)});case 3:WebSocket.send(JSON.stringify({'message':'message was sent','friendName':string,'type':'message_update'}));document.getElementById('mess').value='';// Checking if message exist in chatroom\nif(newestMessage.current[\"\".concat(string)]){getMessages(20,newestMessage.current[\"\".concat(string)].created,2);}else{getMessages(10,\"321\",1);}case 6:case\"end\":return _context2.stop();}},_callee2);}));return function sendMessage(_x){return _ref2.apply(this,arguments);};}();var getCSRFToken=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var response,data;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetch(\"http://localhost:8000/users/get-csrf-token\",{method:'GET',headers:{'Content-Type':'application/json','Authorization':'Bearer '+String(authToken.access)}},[]);case 2:response=_context3.sent;_context3.next=5;return response.json();case 5:data=_context3.sent;return _context3.abrupt(\"return\",data.csrfToken);case 7:case\"end\":return _context3.stop();}},_callee3);}));return function getCSRFToken(){return _ref3.apply(this,arguments);};}();var uploadFile=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e){var csrfToken,file,formData;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:_context4.next=2;return getCSRFToken();case 2:csrfToken=_context4.sent;// Getting file from html input\nfile=e.target.files[0];// Creating form object\nformData=new FormData();formData.append('file',file);formData.append('csrfmiddlewaretoken',csrfToken);_context4.next=9;return fetch('http://localhost:8000/users/rooms/sendfile/'+string,{method:'POST',headers:{// 'Content-Type':'multipart/form-data',\n'Authorization':'Bearer '+String(authToken.access),'X-CSRFToken':csrfToken// 'Access-Control-Allow-Origin': 'origin-or-null / wildcard'\n},body:formData});case 9:document.getElementById('file_input').value=null;WebSocket.send(JSON.stringify({'message':'message was sent','friendName':string,'type':'message_update'}));getMessages(20,newestMessage.current[\"\".concat(string)].created,2);case 12:case\"end\":return _context4.stop();}},_callee4);}));return function uploadFile(_x2){return _ref4.apply(this,arguments);};}();var downloadFile=function downloadFile(id){window.open(\"http://localhost:8000/users/rooms/download/\".concat(id,\"/\").concat(authToken.access),'_blank').focus();};function pushToStorage(value){// Getting values from storage\nvar array=JSON.parse(sessionStorage.getItem(\"Updates\"));// Adding value to array\narray.push(value);updates=array;// Overwrites current session storage with new one\nsessionStorage.setItem(\"Updates\",JSON.stringify(array));}function removeFromStorage(value){// getting data from session storage \nvar array=JSON.parse(sessionStorage.getItem(\"Updates\"));// Getting index value of passed value (param)\nvar index=array.indexOf(value);// If value exist in list\nif(index>-1){// Removing that value from list\narray.splice(index,1);}// Updating 'update' list and saving it to session storage too \nupdates=array;sessionStorage.setItem(\"Updates\",JSON.stringify(array));}// setTimeout(() => {\n//     const input = document.getElementById(\"mess\");\n//     input.focus();\n//   }, 10);\nvar FileLinkComponent=function FileLinkComponent(message){// console.log(message.message.file.fileName)\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"chat_elem\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"inline-flex\",children:[message.message.user.username,\": \",/*#__PURE__*/_jsx(\"div\",{className:\"file_elem\",onClick:function onClick(){return downloadFile(message.message.file.id);},children:message.message.file.fileName})]})});};function MessageForRender(){if(messages===null){return/*#__PURE__*/_jsx(\"h1\",{children:\"No Messages\"});}else{return messages.map(function(f){return f.isIncludeFile===false?/*#__PURE__*/_jsxs(\"div\",{className:\"chat_elem\",children:[f.user.username,\": \",f.body]}):/*#__PURE__*/_jsx(FileLinkComponent,{message:f});});}}return/*#__PURE__*/_jsxs(\"div\",{className:\"message_container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message_container_ui\",children:/*#__PURE__*/_jsx(ConControls,{data:messageRTC})}),/*#__PURE__*/_jsxs(\"div\",{className:\"message_container_chat\",children:[/*#__PURE__*/_jsx(\"ul\",{className:\"message_list\",ref:containerRef,children:/*#__PURE__*/_jsx(MessageForRender,{})}),/*#__PURE__*/_jsx(\"div\",{className:\"message_text_input\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:sendMessage,autoComplete:\"off\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"mess\",name:\"message\",autoFocus:true,placeholder:\"type here\"}),/*#__PURE__*/_jsxs(\"label\",{id:\"message_text_input-file\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"file_input\",name:\"file\",onChange:uploadFile}),\"Upload\"]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})})]})]});};export default MessageContainer;","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","useParams","AuthContext","ConControls","MessageContainer","messageRTC","setMessageRTC","username","string","toString","containerRef","messages","setMessages","newestMessage","oldestMessage","currentMessages","WebSocket","authToken","user","updates","sessionStorage","getItem","setItem","JSON","stringify","current","length","getMessages","includes","removeFromStorage","created","handleScroll","scrollTop","addEventListener","removeEventListener","onclose","console","log","onopen","send","onmessage","e","data","parse","type","friend","window","location","reload","setTimeout","pushToStorage","count","date","mode","mode2","fetch","method","headers","String","access","respone","json","addToMessages","sendMessage","preventDefault","body","target","message","value","document","getElementById","getCSRFToken","response","csrfToken","uploadFile","file","files","formData","FormData","append","downloadFile","id","open","focus","array","push","index","indexOf","splice","FileLinkComponent","fileName","MessageForRender","map","f","isIncludeFile"],"sources":["C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/src/components/MessageContainer.js"],"sourcesContent":["import React, {useState, useEffect, useContext, useRef}  from 'react'\r\nimport {  useParams } from \"react-router-dom\";\r\nimport AuthContext from '../context/AuthContext'\r\nimport ConControls from './ConControls';\r\n\r\n\r\nconst MessageContainer = () => {\r\n  let [messageRTC, setMessageRTC] = useState(null)\r\n  \r\n  // Getting username from URL\r\n  let { username } = useParams();\r\n  let string = username.toString()\r\n\r\n\r\n  const containerRef = useRef(null)\r\n\r\n  // Creating messages var \r\n  // Getting messages from session storage for current friend\r\n  // If session storage doesnt have any values it means:\r\n  // 1: Theres is no messages in current chatroom\r\n  // 2: or it is first load of chatroom\r\n  // in any cases above, chatroom will send to django getMessages request\r\n  let [messages, setMessages] = useState([]) \r\n  \r\n  let newestMessage = useRef({})\r\n  let oldestMessage = useRef({})\r\n\r\n  // CurrentMessages contains messages from every friend that were loaded in current session\r\n  let currentMessages = useRef({})\r\n\r\n  let { WebSocket, authToken, user} = useContext(AuthContext)\r\n  \r\n  // Initializint empty list\r\n  let updates = []\r\n  // Checking if key 'update' exist in session storage\r\n  // If not:\r\n  if (sessionStorage.getItem(\"Updates\") == null)\r\n  {\r\n    // Creating Key with empty list as value\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(updates))\r\n  } \r\n  // Updating list with current values from session storage\r\n  // so that list is up to date\r\n  updates = sessionStorage.getItem(\"Updates\")\r\n\r\n  // functions 'useEffect()' trigges on the first load\r\n  // and every time 'username' is updated \r\n  useEffect(() => {\r\n    \r\n\r\n    if (!currentMessages.current[`${string}`])\r\n    {\r\n      currentMessages.current[`${string}`] = [];\r\n    }\r\n\r\n    // Checking if messages are empty\r\n    if (currentMessages.current[`${string}`].length == 0)\r\n    {\r\n      // If so, sending to django reqeust for new messages from database\r\n      getMessages(40, \"321\" ,1)\r\n    }\r\n    else if(updates.includes(username))\r\n    {\r\n      // If not and update list contains friend username\r\n      // It means friend send to this user message\r\n      // and message var needs to be updated \r\n\r\n      // Removing friend from update list\r\n      removeFromStorage(username)\r\n      // Getting new messages \r\n      // (In Future there should be update function that will only get new messages, instead getting all messages from current chatroom) DONE\r\n      getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n    }\r\n    else\r\n    {\r\n      // else it means there was no updates/messages sent\r\n      // so setting messages from currentMessages ref, stored before\r\n      setMessages(currentMessages.current[`${string}`])\r\n    }\r\n\r\n    // \r\n    const handleScroll = () => {\r\n      if (containerRef.current.scrollTop === 0) {\r\n        getMessages(40, oldestMessage.current[`${string}`].created, 3, 2)\r\n      }\r\n    };\r\n\r\n    containerRef.current.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      if (containerRef.current){\r\n        containerRef.current.removeEventListener('scroll', handleScroll);\r\n      }\r\n    };\r\n\r\n  }, [username])\r\n  \r\n  WebSocket.onclose = () => {\r\n    console.log(\"Websocket Client Disconnected\");\r\n  }\r\n\r\n  WebSocket.onopen = () => {\r\n    console.log('WebSocket Client Connected');\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'friend is connected',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n  }\r\n  // Listener for upcoming messages from django\r\n  // I dont think async is required, but who knows \r\n  WebSocket.onmessage = function (e) {\r\n    let data = JSON.parse(e.data)\r\n    // Console logging messages for debugging\r\n    // console.log('Data:', data)\r\n    // console.log(JSON.parse(e.data))\r\n    if(data.type === 'friendRequest' && data.friend != user.username)\r\n    {\r\n      window.location.reload()\r\n    }\r\n    // If user recives chat_update prompt and is from a friend \r\n    // whos chatroom is open: update messages \r\n    if(data.type === 'chat_update' && data.friend === string){\r\n      // console.log('chat')\r\n      // 100ms delay is required, for some bizarre reasons\r\n      // if there is no delay, getMessages() works every 3rd time\r\n      setTimeout(() => {\r\n        if (newestMessage.current[`${string}`])\r\n        {\r\n          getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n        }\r\n        else\r\n        {\r\n          getMessages(10, \"321\" ,1)\r\n        }\r\n      }, 300);\r\n      // setMessageRTC(data)\r\n      // isCalling(true)\r\n    }\r\n    else if (!updates.includes(data.friend) && data.friend !== user.username)\r\n    {\r\n        // If friend sent you messages \r\n        // and that friends chatroom wasnt open\r\n        // saving that friend username to update list \r\n        pushToStorage(data.friend);          \r\n    }\r\n    else //if(data.type === \"init_call\" && data.friend === string)\r\n    {\r\n      // console.log(\"Your friends is calling\")\r\n      setMessageRTC(data)\r\n      // isCalling(true)\r\n      // isFcall(true)\r\n    }\r\n  }\r\n  // Getting messages form django backend\r\n  let getMessages = async (count = 1, date = \"1987-07-18T20:59:26.076557Z\", mode = 1, mode2 = 1) => {\r\n    let respone = await fetch(`http://localhost:8000/users/rooms/${string}/${count}/${date}/${mode}`, {\r\n      method: 'GET',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }\r\n    }, [])\r\n    \r\n    let data = await respone.json()\r\n    // console.log(data)\r\n    \r\n    // console.log(currentMessages.current)\r\n    // console.log(currentMessages.current[`${string}`])\r\n    \r\n    // Adding messages to currentMessage ref\r\n    addToMessages(data, mode2)\r\n    \r\n    // \r\n    setMessages(currentMessages.current[`${string}`])\r\n    // console.log(\"newest: \" + newestMessage.current[`${string}`].created)\r\n    // console.log(\"oldest: \" + oldestMessage.current[`${string}`].created)\r\n  }\r\n  \r\n  // Function that adds messages to storage and \r\n  // Keep track of newest and oldest messages\r\n  let addToMessages = (data, mode = 1) => {\r\n    \r\n    // Adding new message/s to ref \r\n    // mode 1 adding ms at the beginning of the list\r\n    // mode 2 adding ms at the end of the list\r\n    if (mode == 1)\r\n    {\r\n      currentMessages.current[`${string}`] = [...currentMessages.current[string], ...data];\r\n    }\r\n    else if (mode == 2)\r\n    {\r\n      currentMessages.current[`${string}`] = [...data, ...currentMessages.current[string]];\r\n    }\r\n    \r\n    newestMessage.current[`${string}`] = currentMessages.current[`${string}`][currentMessages.current[`${string}`].length - 1];\r\n    oldestMessage.current[`${string}`] = currentMessages.current[`${string}`][0];\r\n  }\r\n\r\n  \r\n  // Sending messages to djnago\r\n  let sendMessage = async (e) => {\r\n    e.preventDefault()\r\n    // Sending message to websocket\r\n    // And passing friend name from url\r\n    await fetch('http://localhost:8000/users/rooms/send/'+string, {\r\n      method: 'POST',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }, \r\n      body:JSON.stringify(e.target.message.value)\r\n    })\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'message was sent',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n    document.getElementById('mess').value = ''\r\n    \r\n    // Checking if message exist in chatroom\r\n    if (newestMessage.current[`${string}`])\r\n    {\r\n      getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n    }\r\n    else\r\n    {\r\n      getMessages(10, \"321\" ,1)\r\n    }\r\n\r\n  }\r\n\r\n  let getCSRFToken = async () => {\r\n    let response = await fetch(`http://localhost:8000/users/get-csrf-token`, {\r\n      method: 'GET',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }\r\n    }, [])\r\n    let data = await response.json()\r\n    // console.log(data)\r\n    return data.csrfToken;\r\n  }\r\n\r\n  let uploadFile = async (e) => {\r\n    // Getting token as far as I know is not currently requierd\r\n    const csrfToken = await getCSRFToken()\r\n    // Getting file from html input\r\n    const file = e.target.files[0];\r\n\r\n    // Creating form object\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('csrfmiddlewaretoken', csrfToken);\r\n\r\n    await fetch('http://localhost:8000/users/rooms/sendfile/'+string, {\r\n      method: 'POST',\r\n      headers:{\r\n        // 'Content-Type':'multipart/form-data',\r\n        'Authorization':'Bearer ' + String(authToken.access),\r\n        'X-CSRFToken': csrfToken\r\n        // 'Access-Control-Allow-Origin': 'origin-or-null / wildcard'\r\n      }, \r\n      body: formData\r\n    })\r\n\r\n    document.getElementById('file_input').value = null\r\n\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'message was sent',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n\r\n    getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n  }\r\n\r\n  let downloadFile = (id) => {\r\n    window.open(`http://localhost:8000/users/rooms/download/${id}/${authToken.access}`, '_blank').focus()\r\n  }\r\n\r\n  function pushToStorage(value)\r\n  {\r\n    // Getting values from storage\r\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"))\r\n    // Adding value to array\r\n    array.push(value)\r\n    updates = array\r\n    // Overwrites current session storage with new one\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array))\r\n  }\r\n\r\n  function removeFromStorage(value)\r\n  {\r\n    // getting data from session storage \r\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"))\r\n    // Getting index value of passed value (param)\r\n    let index = array.indexOf(value)\r\n    // If value exist in list\r\n    if (index > -1)\r\n    {\r\n      // Removing that value from list\r\n      array.splice(index, 1)\r\n    }\r\n    // Updating 'update' list and saving it to session storage too \r\n    updates = array\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array))\r\n  }\r\n\r\n  // setTimeout(() => {\r\n  //     const input = document.getElementById(\"mess\");\r\n  //     input.focus();\r\n  //   }, 10);\r\n\r\n  let FileLinkComponent = (message) => {\r\n    // console.log(message.message.file.fileName)\r\n    return (\r\n      <div className='chat_elem'><div className='inline-flex'>{message.message.user.username}: <div className='file_elem' onClick={() => downloadFile(message.message.file.id) }>{message.message.file.fileName}</div></div></div>\r\n    )\r\n  }\r\n\r\n  function MessageForRender()\r\n  {\r\n    if (messages === null)\r\n    {\r\n      return <h1>No Messages</h1>\r\n    }\r\n    else\r\n    {\r\n      return( \r\n        messages.map(f => f.isIncludeFile === false ? (<div className='chat_elem'>{f.user.username}: {f.body}</div>) : (<FileLinkComponent message={f}/>))\r\n      )\r\n    }\r\n  }\r\n  return (\r\n    <div className='message_container'>\r\n      <div className='message_container_ui'>\r\n        <ConControls data={messageRTC} />\r\n      </div>\r\n      <div className='message_container_chat'>\r\n        <ul className='message_list' ref={containerRef}>\r\n          <MessageForRender  />\r\n        </ul>\r\n        <div className='message_text_input'>\r\n          <form onSubmit={sendMessage} autoComplete=\"off\">\r\n            <input type=\"text\" id='mess' name=\"message\" autoFocus placeholder='type here'/>\r\n            <label id='message_text_input-file' >\r\n              <input type=\"file\" id=\"file_input\" name=\"file\" onChange={uploadFile}/>\r\n              Upload\r\n            </label>\r\n            <button type=\"submit\">Send</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageContainer\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}