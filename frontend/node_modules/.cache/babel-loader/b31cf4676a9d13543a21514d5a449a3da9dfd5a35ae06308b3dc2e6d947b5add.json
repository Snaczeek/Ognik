{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateu\\\\Desktop\\\\OGNIK\\\\Ognik\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from 'react-router-dom';\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Checking if user has token in browser storage\n  // if so then, parsing value into json format\n  let [authToken, setAuthTokens] = useState(() => localStorage.getItem('authToken') ? JSON.parse(localStorage.getItem('authToken')) : null);\n  // decoding jwt token into useable block\n  let [user, setUser] = useState(() => localStorage.getItem('authToken') ? jwt_decode(localStorage.getItem('authToken')) : null);\n  let [loading, setLoading] = useState(true);\n  let url = `ws://localhost:8000/ws/socket-server/`;\n  let [chatSocket, setChatSocket] = useState(() => authToken.access ? new W3CWebSocket(url + \"?token=\" + String(authToken.access)) : null);\n\n  // setChatSocket = new W3CWebSocket(url + \"?token=\" + String(authToken.access))\n\n  const navigate = useNavigate();\n\n  // login function\n  let loginUser = async e => {\n    e.preventDefault();\n    // fetching credentials to django backend\n    let response = await fetch('http://localhost:8000/users/token/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    });\n    let data = await response.json();\n\n    // if response form django is positive \n    // saving token data to browser storage (at this point user is logged)\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authToken', JSON.stringify(data));\n      navigate('/test');\n    } else {\n      alert(\"Hujnia z grzybami\");\n    }\n  };\n\n  // logout function\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    // clearing users web storage\n    localStorage.removeItem('authToken');\n    navigate('/');\n  };\n\n  // updating access token\n  let updateToken = async () => {\n    // fetching refresh token to django backend\n    let response = await fetch('http://localhost:8000/users/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // if refresh token exist, send it\n      // if not, send null\n      body: JSON.stringify({\n        'refresh': authToken === null || authToken === void 0 ? void 0 : authToken.refresh\n      })\n    });\n    let data = await response.json();\n\n    // saving new tokens\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authToken', JSON.stringify(data));\n    } else {\n      logoutUser();\n    }\n    if (loading) {\n      setLoading(false);\n    }\n  };\n\n  // context data for provider\n  let contextData = {\n    user: user,\n    authToken: authToken,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    chatSocket: chatSocket\n  };\n  useEffect(() => {\n    // before children are rendered \n    // update token\n    if (loading) {\n      updateToken();\n    }\n\n    // run updateToken() every 4 minutes\n    let s4Minutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authToken) {\n        updateToken();\n      }\n    }, s4Minutes);\n    return () => clearInterval(interval);\n  }, [authToken, loading]);\n\n  // returnig contex data for children\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"fGnuBCwR62jV3lbKcZQwciBBOw4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jwt_decode","useNavigate","w3cwebsocket","W3CWebSocket","AuthContext","AuthProvider","children","authToken","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","url","chatSocket","setChatSocket","access","String","navigate","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","target","username","value","password","data","json","status","setItem","alert","logoutUser","removeItem","updateToken","refresh","contextData","s4Minutes","interval","setInterval","clearInterval"],"sources":["C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { w3cwebsocket as W3CWebSocket} from 'websocket';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext\r\n\r\nexport const AuthProvider = ({children}) => {\r\n\r\n    // Checking if user has token in browser storage\r\n    // if so then, parsing value into json format\r\n    let [authToken, setAuthTokens] = useState(() => localStorage.getItem('authToken') ? JSON.parse(localStorage.getItem('authToken')) : null)\r\n    // decoding jwt token into useable block\r\n    let [user, setUser] = useState(() => localStorage.getItem('authToken') ? jwt_decode(localStorage.getItem('authToken')) : null)\r\n\r\n\r\n    let [loading, setLoading] = useState(true)\r\n\r\n    \r\n    let url = `ws://localhost:8000/ws/socket-server/`\r\n    let [chatSocket, setChatSocket] = useState(() => authToken.access ? new W3CWebSocket(url + \"?token=\" + String(authToken.access)): null)\r\n  \r\n    // setChatSocket = new W3CWebSocket(url + \"?token=\" + String(authToken.access))\r\n\r\n    const navigate = useNavigate()\r\n\r\n    // login function\r\n    let loginUser = async (e ) => {\r\n        e.preventDefault()\r\n        // fetching credentials to django backend\r\n        let response = await fetch('http://localhost:8000/users/token/', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({'username':e.target.username.value, 'password':e.target.password.value})\r\n        })\r\n        let data = await response.json()\r\n\r\n        // if response form django is positive \r\n        // saving token data to browser storage (at this point user is logged)\r\n        if(response.status === 200)\r\n        {\r\n            setAuthTokens(data)\r\n            setUser(jwt_decode(data.access))\r\n            localStorage.setItem('authToken', JSON.stringify(data))\r\n            navigate('/test')\r\n        }\r\n        else\r\n        {\r\n            alert(\"Hujnia z grzybami\")\r\n        }\r\n    }\r\n\r\n    // logout function\r\n    let logoutUser = () => {\r\n        setAuthTokens(null)\r\n        setUser(null)\r\n        // clearing users web storage\r\n        localStorage.removeItem('authToken')\r\n        navigate('/')\r\n    }\r\n\r\n    // updating access token\r\n    let updateToken = async () => {\r\n        // fetching refresh token to django backend\r\n        let response = await fetch('http://localhost:8000/users/token/refresh/', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            // if refresh token exist, send it\r\n            // if not, send null\r\n            body:JSON.stringify({'refresh': authToken?.refresh})\r\n        })\r\n        let data = await response.json()\r\n\r\n        // saving new tokens\r\n        if (response.status === 200){\r\n            setAuthTokens(data)\r\n            setUser(jwt_decode(data.access))\r\n            localStorage.setItem('authToken', JSON.stringify(data))\r\n        }else\r\n        {\r\n            logoutUser()\r\n        }\r\n\r\n        if(loading){\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    // context data for provider\r\n    let contextData = {\r\n        user:user,\r\n        authToken:authToken,\r\n        loginUser:loginUser,\r\n        logoutUser: logoutUser,\r\n        chatSocket: chatSocket,\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // before children are rendered \r\n        // update token\r\n        if(loading){\r\n            updateToken()\r\n        }\r\n\r\n        // run updateToken() every 4 minutes\r\n        let s4Minutes = 1000 * 60 * 4\r\n        let interval = setInterval(() => {\r\n            if(authToken){\r\n                updateToken()\r\n            }\r\n        }, s4Minutes)\r\n        return ()=> clearInterval(interval)\r\n\r\n    }, [authToken, loading])\r\n\r\n    // returnig contex data for children\r\n    return (\r\n    <AuthContext.Provider value={contextData}>\r\n        {/* render children after loading is done */}\r\n        {loading ? null : children}\r\n    </AuthContext.Provider>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}