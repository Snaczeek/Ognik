{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateu\\\\Desktop\\\\OGNIK\\\\Ognik\\\\frontend\\\\src\\\\components\\\\MessageContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useMemo } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport AuthContext from '../context/AuthContext';\nimport ConControls from './ConControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContainer = () => {\n  _s();\n  let [messageRTC, setMessageRTC] = useState(null);\n\n  // Getting username from URL\n  let {\n    username\n  } = useParams();\n  let string = username.toString();\n\n  // Creating messages var \n  // Getting messages from session storage for current friend\n  // If session storage doesnt have any values it means:\n  // 1: Theres is no messages in current chatroom\n  // 2: or it is first load of chatroom\n  // in any cases above, chatroom will send to django getMessages request\n  let [messages, setMessages] = useState(() => sessionStorage.getItem(\"Messages_\" + username) ? JSON.parse(sessionStorage.getItem(\"Messages_\" + username)) : null);\n  let {\n    WebSocket,\n    authToken,\n    user\n  } = useContext(AuthContext);\n\n  // Initializint empty list\n  let updates = [];\n  // Checking if key 'update' exist in session storage\n  // If not:\n  if (sessionStorage.getItem(\"Updates\") == null) {\n    // Creating Key with empty list as value\n    sessionStorage.setItem(\"Updates\", JSON.stringify(updates));\n  }\n  // Updating list with current values from session storage\n  // so that list is up to date\n  updates = sessionStorage.getItem(\"Updates\");\n\n  // functions 'useEffect()' trigges on the first load\n  // and every time 'username' is updated \n  useEffect(() => {\n    // Checking if messages are empty\n    if (sessionStorage.getItem(\"Messages_\" + username) === null) {\n      // If so, sending to django reqeust for new messages from database\n      getMessages();\n    } else if (updates.includes(username)) {\n      // If not and update list contains friend username\n      // It means friend send to this user message\n      // and message var needs to be updated \n\n      // Removing friend from update list\n      removeFromStorage(username);\n      // Getting new messages \n      // (In Future there should be update function that will only get new messages, instead getting all messages from current chatroom)\n      getMessages();\n    } else {\n      // else it means there was no updates/messages sent\n      // so setting messages from session storage, stored before\n      setMessages(JSON.parse(sessionStorage.getItem(\"Messages_\" + username)));\n    }\n  }, [username]);\n  WebSocket.onclose = () => {\n    console.log(\"Websocket Client Disconnected\");\n  };\n  WebSocket.onopen = () => {\n    console.log('WebSocket Client Connected');\n    WebSocket.send(JSON.stringify({\n      'message': 'friend is connected',\n      'friendName': string,\n      'type': 'message_update'\n    }));\n  };\n  // Listener for upcoming messages from django\n  // I dont think async is required, but who knows \n  WebSocket.onmessage = function (e) {\n    let data = JSON.parse(e.data);\n    // Console logging messages for debugging\n    // console.log('Data:', data)\n    // console.log(data)\n\n    // If user recives chat_update prompt and is from a friend \n    // whos chatroom is open: update messages \n    if (data.type === 'chat_update' && data.friend === string) {\n      // console.log('chat')\n      // 100ms delay is required, for some bizarre reasons\n      // if there is no delay, getMessages() works every 3rd time\n      setTimeout(() => {\n        getMessages();\n      }, 300);\n      // setMessageRTC(data)\n      // isCalling(true)\n    } else if (!updates.includes(data.friend) && data.friend !== user.username) {\n      // If friend sent you messages \n      // and that friends chatroom wasnt open\n      // saving that friend username to update list \n      pushToStorage(data.friend);\n    } else\n      //if(data.type === \"init_call\" && data.friend === string)\n      {\n        // console.log(\"Your friends is calling\")\n        setMessageRTC(data);\n        // isCalling(true)\n        // isFcall(true)\n      }\n  };\n  // Getting messages form django backend\n  let getMessages = async function () {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"1987-07-18T20:59:26.076557Z\";\n    let isNew = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let respone = await fetch(`http://localhost:8000/users/rooms/${string}/${count}/${date}/${isNew}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + String(authToken.access)\n      }\n    }, []);\n    let data = await respone.json();\n    // console.log(data)\n    setMessages(data);\n    // saving messages to session storage\n    sessionStorage.setItem(\"Messages_\" + username, JSON.stringify(data));\n  };\n\n  // Sending messages to djnago\n  let sendMessage = async e => {\n    e.preventDefault();\n    // Sending message to websocket\n    // And passing friend name from url\n    WebSocket.send(JSON.stringify({\n      'message': 'message was sent',\n      'friendName': string,\n      'type': 'message_update'\n    }));\n    await fetch('http://localhost:8000/users/rooms/send/' + string, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + String(authToken.access)\n      },\n      body: JSON.stringify(e.target.message.value)\n    });\n    document.getElementById('mess').value = '';\n    getMessages();\n  };\n  function pushToStorage(value) {\n    // Getting values from storage\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"));\n    // Adding value to array\n    array.push(value);\n    updates = array;\n    // Overwrites current session storage with new one\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array));\n  }\n  function removeFromStorage(value) {\n    // getting data from session storage \n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"));\n    // Getting index value of passed value (param)\n    let index = array.indexOf(value);\n    // If value exist in list\n    if (index > -1) {\n      // Removing that value from list\n      array.splice(index, 1);\n    }\n    // Updating 'update' list and saving it to session storage too \n    updates = array;\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array));\n  }\n\n  // setTimeout(() => {\n  //     const input = document.getElementById(\"mess\");\n  //     input.focus();\n  //   }, 10);\n\n  function MessageForRender() {\n    if (messages === null) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 14\n      }, this);\n    } else {\n      return messages.map(f => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"friends_elem\",\n        children: [f.user.username, \": \", f.body]\n      }, f.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message_container_ui\",\n      children: /*#__PURE__*/_jsxDEV(ConControls, {\n        data: messageRTC\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message_container_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"message_list\",\n        children: /*#__PURE__*/_jsxDEV(MessageForRender, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_text_input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMessage,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"mess\",\n            name: \"message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageContainer, \"5hHQvB1tqb4tM7wfuAwtxUBW5sM=\", false, function () {\n  return [useParams];\n});\n_c = MessageContainer;\nexport default MessageContainer;\nvar _c;\n$RefreshReg$(_c, \"MessageContainer\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useMemo","useParams","AuthContext","ConControls","MessageContainer","messageRTC","setMessageRTC","username","string","toString","messages","setMessages","sessionStorage","getItem","JSON","parse","WebSocket","authToken","user","updates","setItem","stringify","getMessages","includes","removeFromStorage","onclose","console","log","onopen","send","onmessage","e","data","type","friend","setTimeout","pushToStorage","count","date","isNew","respone","fetch","method","headers","String","access","json","sendMessage","preventDefault","body","target","message","value","document","getElementById","array","push","index","indexOf","splice","MessageForRender","map","f","id"],"sources":["C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/src/components/MessageContainer.js"],"sourcesContent":["import React, {useState, useEffect, useContext, useMemo}  from 'react'\r\nimport {  useParams } from \"react-router-dom\";\r\nimport AuthContext from '../context/AuthContext'\r\nimport ConControls from './ConControls';\r\n\r\n\r\nconst MessageContainer = () => {\r\n  let [messageRTC, setMessageRTC] = useState(null)\r\n\r\n  // Getting username from URL\r\n  let { username } = useParams();\r\n  let string = username.toString()\r\n\r\n  // Creating messages var \r\n  // Getting messages from session storage for current friend\r\n  // If session storage doesnt have any values it means:\r\n  // 1: Theres is no messages in current chatroom\r\n  // 2: or it is first load of chatroom\r\n  // in any cases above, chatroom will send to django getMessages request\r\n  let [messages, setMessages] = useState(() => sessionStorage.getItem(\"Messages_\" + username) ? JSON.parse(sessionStorage.getItem(\"Messages_\" + username)) : null) \r\n  \r\n  let { WebSocket, authToken, user} = useContext(AuthContext)\r\n  \r\n  // Initializint empty list\r\n  let updates = []\r\n  // Checking if key 'update' exist in session storage\r\n  // If not:\r\n  if (sessionStorage.getItem(\"Updates\") == null)\r\n  {\r\n    // Creating Key with empty list as value\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(updates))\r\n  } \r\n  // Updating list with current values from session storage\r\n  // so that list is up to date\r\n  updates = sessionStorage.getItem(\"Updates\")\r\n\r\n  // functions 'useEffect()' trigges on the first load\r\n  // and every time 'username' is updated \r\n  useEffect(() => {\r\n    // Checking if messages are empty\r\n    if (sessionStorage.getItem(\"Messages_\" + username) === null)\r\n    {\r\n      // If so, sending to django reqeust for new messages from database\r\n      getMessages()\r\n    }\r\n    else if(updates.includes(username))\r\n    {\r\n      // If not and update list contains friend username\r\n      // It means friend send to this user message\r\n      // and message var needs to be updated \r\n\r\n      // Removing friend from update list\r\n      removeFromStorage(username)\r\n      // Getting new messages \r\n      // (In Future there should be update function that will only get new messages, instead getting all messages from current chatroom)\r\n      getMessages()\r\n    }\r\n    else\r\n    {\r\n      // else it means there was no updates/messages sent\r\n      // so setting messages from session storage, stored before\r\n      setMessages(JSON.parse(sessionStorage.getItem(\"Messages_\" + username)))\r\n    }\r\n\r\n  }, [username])\r\n  \r\n  WebSocket.onclose = () => {\r\n    console.log(\"Websocket Client Disconnected\");\r\n  }\r\n\r\n  WebSocket.onopen = () => {\r\n    console.log('WebSocket Client Connected');\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'friend is connected',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n  }\r\n  // Listener for upcoming messages from django\r\n  // I dont think async is required, but who knows \r\n  WebSocket.onmessage = function (e) {\r\n    let data = JSON.parse(e.data)\r\n    // Console logging messages for debugging\r\n    // console.log('Data:', data)\r\n    // console.log(data)\r\n\r\n    // If user recives chat_update prompt and is from a friend \r\n    // whos chatroom is open: update messages \r\n    if(data.type === 'chat_update' && data.friend === string){\r\n      // console.log('chat')\r\n      // 100ms delay is required, for some bizarre reasons\r\n      // if there is no delay, getMessages() works every 3rd time\r\n      setTimeout(() => {\r\n        getMessages()\r\n      }, 300);\r\n      // setMessageRTC(data)\r\n      // isCalling(true)\r\n    }\r\n    else if (!updates.includes(data.friend) && data.friend !== user.username)\r\n    {\r\n        // If friend sent you messages \r\n        // and that friends chatroom wasnt open\r\n        // saving that friend username to update list \r\n        pushToStorage(data.friend);          \r\n    }\r\n    else //if(data.type === \"init_call\" && data.friend === string)\r\n    {\r\n      // console.log(\"Your friends is calling\")\r\n      setMessageRTC(data)\r\n      // isCalling(true)\r\n      // isFcall(true)\r\n    }\r\n  }\r\n  // Getting messages form django backend\r\n  let getMessages = async (count = 10, date = \"1987-07-18T20:59:26.076557Z\", isNew = 1) => {\r\n    let respone = await fetch(`http://localhost:8000/users/rooms/${string}/${count}/${date}/${isNew}`, {\r\n      method: 'GET',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }\r\n    }, [])\r\n    \r\n    let data = await respone.json()\r\n    // console.log(data)\r\n    setMessages(data)\r\n    // saving messages to session storage\r\n    sessionStorage.setItem(\"Messages_\" + username, JSON.stringify(data))\r\n  }\r\n  \r\n  // Sending messages to djnago\r\n  let sendMessage = async (e) => {\r\n    e.preventDefault()\r\n    // Sending message to websocket\r\n    // And passing friend name from url\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'message was sent',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n    await fetch('http://localhost:8000/users/rooms/send/'+string, {\r\n      method: 'POST',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }, \r\n      body:JSON.stringify(e.target.message.value)\r\n    })\r\n    document.getElementById('mess').value = ''\r\n    \r\n    getMessages()\r\n  }\r\n\r\n  function pushToStorage(value)\r\n  {\r\n    // Getting values from storage\r\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"))\r\n    // Adding value to array\r\n    array.push(value)\r\n    updates = array\r\n    // Overwrites current session storage with new one\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array))\r\n  }\r\n\r\n  function removeFromStorage(value)\r\n  {\r\n    // getting data from session storage \r\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"))\r\n    // Getting index value of passed value (param)\r\n    let index = array.indexOf(value)\r\n    // If value exist in list\r\n    if (index > -1)\r\n    {\r\n      // Removing that value from list\r\n      array.splice(index, 1)\r\n    }\r\n    // Updating 'update' list and saving it to session storage too \r\n    updates = array\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array))\r\n  }\r\n\r\n  // setTimeout(() => {\r\n  //     const input = document.getElementById(\"mess\");\r\n  //     input.focus();\r\n  //   }, 10);\r\n\r\n\r\n  function MessageForRender()\r\n  {\r\n    if (messages === null)\r\n    {\r\n      return <h1>No Messages</h1>\r\n    }\r\n    else\r\n    {\r\n      return( \r\n        messages.map(f => (\r\n          <div key={f.id}className='friends_elem'>{f.user.username}: {f.body}</div>\r\n        ))    \r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='message_container'>\r\n      <div className='message_container_ui'>\r\n        <ConControls data={messageRTC} />\r\n      </div>\r\n      <div className='message_container_chat'>\r\n        <ul className='message_list'>\r\n          <MessageForRender />\r\n        </ul>\r\n        <div className='message_text_input'>\r\n          <form onSubmit={sendMessage} autoComplete=\"off\">\r\n            <input type=\"text\" id='mess' name=\"message\" />\r\n            <button type=\"submit\">Send</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageContainer\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}