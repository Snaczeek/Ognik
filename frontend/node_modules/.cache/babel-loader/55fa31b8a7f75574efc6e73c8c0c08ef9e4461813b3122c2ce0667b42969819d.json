{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateu\\\\Desktop\\\\OGNIK\\\\Ognik\\\\frontend\\\\src\\\\components\\\\MessageContainer.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport AuthContext from '../context/AuthContext';\nimport FriendContext from '../context/FriendContext';\nimport ConControls from './ConControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContainer = function () {\n  _s();\n  let asd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let [messageRTC, setMessageRTC] = useState();\n\n  // Getting username from URL\n  let {\n    username\n  } = useParams();\n  let string = username.toString();\n  const containerRef = useRef(null);\n\n  // Creating messages var \n  // Getting messages from session storage for current friend\n  // If session storage doesnt have any values it means:\n  // 1: Theres is no messages in current chatroom\n  // 2: or it is first load of chatroom\n  // in any cases above, chatroom will send to django getMessages request\n  let [messages, setMessages] = useState([]);\n  let newestMessage = useRef({});\n  let oldestMessage = useRef({});\n\n  // CurrentMessages contains messages from every friend that were loaded in current session\n  let currentMessages = useRef({});\n  let {\n    WebSocket,\n    authToken,\n    user\n  } = useContext(AuthContext);\n  let {\n    wsdata\n  } = useContext(FriendContext);\n\n  // Initializint empty list\n  let updates = [];\n  // Checking if key 'update' exist in session storage\n  // If not:\n  if (sessionStorage.getItem(\"Updates\") == null) {\n    // Creating Key with empty list as value\n    sessionStorage.setItem(\"Updates\", JSON.stringify(updates));\n  }\n  // Updating list with current values from session storage\n  // so that list is up to date\n  updates = sessionStorage.getItem(\"Updates\");\n\n  // functions 'useEffect()' trigges on the first load\n  // and every time 'username' is updated \n  useEffect(() => {\n    if (!currentMessages.current[`${string}`]) {\n      currentMessages.current[`${string}`] = [];\n    }\n\n    // Checking if messages are empty\n    if (currentMessages.current[`${string}`].length == 0) {\n      // If so, sending to django reqeust for new messages from database\n      getMessages(40, \"321\", 1);\n    } else if (updates.includes(username)) {\n      // If not and update list contains friend username\n      // It means friend send to this user message\n      // and message var needs to be updated \n\n      // Removing friend from update list\n      removeFromStorage(username);\n      // Getting new messages \n      // (In Future there should be update function that will only get new messages, instead getting all messages from current chatroom) DONE\n      getMessages(20, newestMessage.current[`${string}`].created, 2);\n    } else {\n      // else it means there was no updates/messages sent\n      // so setting messages from currentMessages ref, stored before\n      setMessages(currentMessages.current[`${string}`]);\n    }\n\n    // \n    const handleScroll = () => {\n      if (containerRef.current.scrollTop === 0) {\n        getMessages(40, oldestMessage.current[`${string}`].created, 3, 2);\n      }\n    };\n    containerRef.current.addEventListener('scroll', handleScroll);\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, [username]);\n  WebSocket.onclose = () => {\n    console.log(\"Websocket Client Disconnected\");\n  };\n  WebSocket.onopen = () => {\n    console.log('WebSocket Client Connected');\n    WebSocket.send(JSON.stringify({\n      'message': 'friend is connected',\n      'friendName': string,\n      'type': 'message_update'\n    }));\n  };\n  // Listener for upcoming messages from django\n  // I dont think async is required, but who knows \n  // WebSocket.onmessage = function (e) {\n  //   let data = JSON.parse(e.data)\n  //   // Console logging messages for debugging\n  //   // console.log('Data:', data)\n  //   console.log(JSON.parse(e.data))\n  //   if(data.type === 'friendRequest' && data.friend != user.username)\n  //   {\n  //     window.location.reload()\n  //   }\n  //   // If user recives chat_update prompt and is from a friend \n  //   // whos chatroom is open: update messages \n  //   if(data.type === 'chat_update' && data.friend === string){\n  //     // console.log('chat')\n  //     // 100ms delay is required, for some bizarre reasons\n  //     // if there is no delay, getMessages() works every 3rd time\n  //     setTimeout(() => {\n  //       if (newestMessage.current[`${string}`])\n  //       {\n  //         getMessages(20, newestMessage.current[`${string}`].created, 2)\n  //       }\n  //       else\n  //       {\n  //         getMessages(10, \"321\" ,1)\n  //       }\n  //     }, 300);\n  //     // setMessageRTC(data)\n  //     // isCalling(true)\n  //   }\n  //   else if (!updates.includes(data.friend) && data.friend !== user.username)\n  //   {\n  //       // If friend sent you messages \n  //       // and that friends chatroom wasnt open\n  //       // saving that friend username to update list \n  //       pushToStorage(data.friend);          \n  //   }\n  //   else //if(data.type === \"init_call\" && data.friend === string)\n  //   {\n  //     // console.log(\"Your friends is calling\")\n  //     setMessageRTC(data)\n  //     // isCalling(true)\n  //     // isFcall(true)\n  //   }\n  // }\n  // Getting messages form django backend\n  let getMessages = async function () {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"1987-07-18T20:59:26.076557Z\";\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let mode2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let respone = await fetch(`http://localhost:8000/users/rooms/${string}/${count}/${date}/${mode}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + String(authToken.access)\n      }\n    }, []);\n    let data = await respone.json();\n    console.log(data);\n\n    // console.log(currentMessages.current)\n    // console.log(currentMessages.current[`${string}`])\n\n    // Adding messages to currentMessage ref\n    addToMessages(data, mode2);\n\n    // \n    setMessages(currentMessages.current[`${string}`]);\n    // console.log(\"newest: \" + newestMessage.current[`${string}`].created)\n    // console.log(\"oldest: \" + oldestMessage.current[`${string}`].created)\n  };\n\n  // Function that adds messages to storage and \n  // Keep track of newest and oldest messages\n  let addToMessages = function (data) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    // Adding new message/s to ref \n    // mode 1 adding ms at the beginning of the list\n    // mode 2 adding ms at the end of the list\n    if (mode == 1) {\n      currentMessages.current[`${string}`] = [...currentMessages.current[string], ...data];\n    } else if (mode == 2) {\n      currentMessages.current[`${string}`] = [...data, ...currentMessages.current[string]];\n    }\n    newestMessage.current[`${string}`] = currentMessages.current[`${string}`][currentMessages.current[`${string}`].length - 1];\n    oldestMessage.current[`${string}`] = currentMessages.current[`${string}`][0];\n  };\n\n  // Sending messages to djnago\n  let sendMessage = async e => {\n    e.preventDefault();\n    // Sending message to websocket\n    // And passing friend name from url\n    await fetch('http://localhost:8000/users/rooms/send/' + string, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + String(authToken.access)\n      },\n      body: JSON.stringify(e.target.message.value)\n    });\n    WebSocket.send(JSON.stringify({\n      'message': 'message was sent',\n      'friendName': string,\n      'type': 'message_update'\n    }));\n    document.getElementById('mess').value = '';\n\n    // Checking if message exist in chatroom\n    if (newestMessage.current[`${string}`]) {\n      getMessages(20, newestMessage.current[`${string}`].created, 2);\n    } else {\n      getMessages(10, \"321\", 1);\n    }\n  };\n  let getCSRFToken = async () => {\n    let response = await fetch(`http://localhost:8000/users/get-csrf-token`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + String(authToken.access)\n      }\n    }, []);\n    let data = await response.json();\n    // console.log(data)\n    return data.csrfToken;\n  };\n  let uploadFile = async e => {\n    // Getting token as far as I know is not currently requierd\n    const csrfToken = await getCSRFToken();\n    // Getting file from html input\n    const file = e.target.files[0];\n\n    // Creating form object\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('csrfmiddlewaretoken', csrfToken);\n    await fetch('http://localhost:8000/users/rooms/sendfile/' + string, {\n      method: 'POST',\n      headers: {\n        // 'Content-Type':'multipart/form-data',\n        'Authorization': 'Bearer ' + String(authToken.access),\n        'X-CSRFToken': csrfToken\n        // 'Access-Control-Allow-Origin': 'origin-or-null / wildcard'\n      },\n\n      body: formData\n    });\n    document.getElementById('file_input').value = null;\n    WebSocket.send(JSON.stringify({\n      'message': 'message was sent',\n      'friendName': string,\n      'type': 'message_update'\n    }));\n    getMessages(20, newestMessage.current[`${string}`].created, 2);\n  };\n  let downloadFile = id => {\n    window.open(`http://localhost:8000/users/rooms/download/${id}/${authToken.access}`, '_blank').focus();\n  };\n  function pushToStorage(value) {\n    // Getting values from storage\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"));\n    // Adding value to array\n    array.push(value);\n    updates = array;\n    // Overwrites current session storage with new one\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array));\n  }\n  function removeFromStorage(value) {\n    // getting data from session storage \n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"));\n    // Getting index value of passed value (param)\n    let index = array.indexOf(value);\n    // If value exist in list\n    if (index > -1) {\n      // Removing that value from list\n      array.splice(index, 1);\n    }\n    // Updating 'update' list and saving it to session storage too \n    updates = array;\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array));\n  }\n\n  // setTimeout(() => {\n  //     const input = document.getElementById(\"mess\");\n  //     input.focus();\n  //   }, 10);\n\n  let FileLinkComponent = message => {\n    // console.log(message.message.file.fileName)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_elem\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-flex\",\n        children: [message.message.user.username, \": \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file_elem\",\n          onClick: () => downloadFile(message.message.file.id),\n          children: message.message.file.fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 96\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 34\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, _this);\n  };\n  function MessageForRender() {\n    if (messages === null) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 14\n      }, this);\n    } else {\n      return messages.map(f => f.isIncludeFile === false ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_elem\",\n        children: [f.user.username, \": \", f.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 56\n      }, this) : /*#__PURE__*/_jsxDEV(FileLinkComponent, {\n        message: f\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 121\n      }, this));\n    }\n  }\n  let handleWs = async dataa => {\n    // console.log(wsdata)\n    if (!dataa) {\n      return;\n    }\n    let data = dataa;\n    // Console logging messages for debugging\n    // console.log('Data:', data)\n    if (data.type === 'friendRequest' && data.friend != user.username) {\n      window.location.reload();\n    }\n    // If user recives chat_update prompt and is from a friend \n    // whos chatroom is open: update messages \n    if (data.type === 'chat_update' && data.friend === string) {\n      // console.log('chat')\n      // 100ms delay is required, for some bizarre reasons\n      // if there is no delay, getMessages() works every 3rd time\n      setTimeout(() => {\n        if (newestMessage.current[`${string}`]) {\n          getMessages(20, newestMessage.current[`${string}`].created, 2);\n        } else {\n          getMessages(10, \"321\", 1);\n        }\n      }, 300);\n      // setMessageRTC(data)\n      // isCalling(true)\n    } else if (!updates.includes(data.friend) && data.friend !== user.username) {\n      // If friend sent you messages \n      // and that friends chatroom wasnt open\n      // saving that friend username to update list \n      pushToStorage(data.friend);\n    } else\n      //if(data.type === \"init_call\" && data.friend === string)\n      {\n        // console.log(\"Your friends is calling\")\n        setMessageRTC(data);\n        // isCalling(true)\n        // isFcall(true)\n      }\n  };\n\n  handleWs(asd);\n  console.log(asd);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message_container_ui\",\n      children: /*#__PURE__*/_jsxDEV(ConControls, {\n        data: messageRTC\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message_container_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"message_list\",\n        ref: containerRef,\n        children: /*#__PURE__*/_jsxDEV(MessageForRender, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_text_input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMessage,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"mess\",\n            name: \"message\",\n            autoFocus: true,\n            placeholder: \"type here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n            id: \"message_text_input-file\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"file_input\",\n              name: \"file\",\n              onChange: uploadFile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }, _this), \"Upload\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, _this);\n};\n_s(MessageContainer, \"VpJWS8Z1SHFGD+TxCyeDeh/PrYs=\", false, function () {\n  return [useParams];\n});\n_c = MessageContainer;\nexport default MessageContainer;\nvar _c;\n$RefreshReg$(_c, \"MessageContainer\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","useParams","AuthContext","FriendContext","ConControls","MessageContainer","asd","messageRTC","setMessageRTC","username","string","toString","containerRef","messages","setMessages","newestMessage","oldestMessage","currentMessages","WebSocket","authToken","user","wsdata","updates","sessionStorage","getItem","setItem","JSON","stringify","current","length","getMessages","includes","removeFromStorage","created","handleScroll","scrollTop","addEventListener","removeEventListener","onclose","console","log","onopen","send","count","date","mode","mode2","respone","fetch","method","headers","String","access","data","json","addToMessages","sendMessage","e","preventDefault","body","target","message","value","document","getElementById","getCSRFToken","response","csrfToken","uploadFile","file","files","formData","FormData","append","downloadFile","id","window","open","focus","pushToStorage","array","parse","push","index","indexOf","splice","FileLinkComponent","fileName","MessageForRender","map","f","isIncludeFile","handleWs","dataa","type","friend","location","reload","setTimeout"],"sources":["C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/src/components/MessageContainer.js"],"sourcesContent":["import React, {useState, useEffect, useContext, useRef}  from 'react'\r\nimport {  useParams } from \"react-router-dom\";\r\nimport AuthContext from '../context/AuthContext'\r\nimport FriendContext from '../context/FriendContext';\r\nimport ConControls from './ConControls';\r\n\r\n\r\nconst MessageContainer = (asd = null) => {\r\n  let [messageRTC, setMessageRTC] = useState()\r\n  \r\n  // Getting username from URL\r\n  let { username } = useParams();\r\n  let string = username.toString()\r\n\r\n\r\n  const containerRef = useRef(null)\r\n\r\n  // Creating messages var \r\n  // Getting messages from session storage for current friend\r\n  // If session storage doesnt have any values it means:\r\n  // 1: Theres is no messages in current chatroom\r\n  // 2: or it is first load of chatroom\r\n  // in any cases above, chatroom will send to django getMessages request\r\n  let [messages, setMessages] = useState([]) \r\n  \r\n  let newestMessage = useRef({})\r\n  let oldestMessage = useRef({})\r\n\r\n  // CurrentMessages contains messages from every friend that were loaded in current session\r\n  let currentMessages = useRef({})\r\n\r\n  let { WebSocket, authToken, user} = useContext(AuthContext)\r\n  let {wsdata} = useContext(FriendContext)\r\n  \r\n  // Initializint empty list\r\n  let updates = []\r\n  // Checking if key 'update' exist in session storage\r\n  // If not:\r\n  if (sessionStorage.getItem(\"Updates\") == null)\r\n  {\r\n    // Creating Key with empty list as value\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(updates))\r\n  } \r\n  // Updating list with current values from session storage\r\n  // so that list is up to date\r\n  updates = sessionStorage.getItem(\"Updates\")\r\n\r\n  // functions 'useEffect()' trigges on the first load\r\n  // and every time 'username' is updated \r\n  useEffect(() => {\r\n\r\n    if (!currentMessages.current[`${string}`])\r\n    {\r\n      currentMessages.current[`${string}`] = [];\r\n    }\r\n\r\n    // Checking if messages are empty\r\n    if (currentMessages.current[`${string}`].length == 0)\r\n    {\r\n      // If so, sending to django reqeust for new messages from database\r\n      getMessages(40, \"321\" ,1)\r\n    }\r\n    else if(updates.includes(username))\r\n    {\r\n      // If not and update list contains friend username\r\n      // It means friend send to this user message\r\n      // and message var needs to be updated \r\n\r\n      // Removing friend from update list\r\n      removeFromStorage(username)\r\n      // Getting new messages \r\n      // (In Future there should be update function that will only get new messages, instead getting all messages from current chatroom) DONE\r\n      getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n    }\r\n    else\r\n    {\r\n      // else it means there was no updates/messages sent\r\n      // so setting messages from currentMessages ref, stored before\r\n      setMessages(currentMessages.current[`${string}`])\r\n    }\r\n\r\n    // \r\n    const handleScroll = () => {\r\n      if (containerRef.current.scrollTop === 0) {\r\n        getMessages(40, oldestMessage.current[`${string}`].created, 3, 2)\r\n      }\r\n    };\r\n\r\n    containerRef.current.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      if (containerRef.current){\r\n        containerRef.current.removeEventListener('scroll', handleScroll);\r\n      }\r\n    };\r\n\r\n  }, [username])\r\n  \r\n  WebSocket.onclose = () => {\r\n    console.log(\"Websocket Client Disconnected\");\r\n  }\r\n\r\n  WebSocket.onopen = () => {\r\n    console.log('WebSocket Client Connected');\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'friend is connected',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n  }\r\n  // Listener for upcoming messages from django\r\n  // I dont think async is required, but who knows \r\n  // WebSocket.onmessage = function (e) {\r\n  //   let data = JSON.parse(e.data)\r\n  //   // Console logging messages for debugging\r\n  //   // console.log('Data:', data)\r\n  //   console.log(JSON.parse(e.data))\r\n  //   if(data.type === 'friendRequest' && data.friend != user.username)\r\n  //   {\r\n  //     window.location.reload()\r\n  //   }\r\n  //   // If user recives chat_update prompt and is from a friend \r\n  //   // whos chatroom is open: update messages \r\n  //   if(data.type === 'chat_update' && data.friend === string){\r\n  //     // console.log('chat')\r\n  //     // 100ms delay is required, for some bizarre reasons\r\n  //     // if there is no delay, getMessages() works every 3rd time\r\n  //     setTimeout(() => {\r\n  //       if (newestMessage.current[`${string}`])\r\n  //       {\r\n  //         getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n  //       }\r\n  //       else\r\n  //       {\r\n  //         getMessages(10, \"321\" ,1)\r\n  //       }\r\n  //     }, 300);\r\n  //     // setMessageRTC(data)\r\n  //     // isCalling(true)\r\n  //   }\r\n  //   else if (!updates.includes(data.friend) && data.friend !== user.username)\r\n  //   {\r\n  //       // If friend sent you messages \r\n  //       // and that friends chatroom wasnt open\r\n  //       // saving that friend username to update list \r\n  //       pushToStorage(data.friend);          \r\n  //   }\r\n  //   else //if(data.type === \"init_call\" && data.friend === string)\r\n  //   {\r\n  //     // console.log(\"Your friends is calling\")\r\n  //     setMessageRTC(data)\r\n  //     // isCalling(true)\r\n  //     // isFcall(true)\r\n  //   }\r\n  // }\r\n  // Getting messages form django backend\r\n  let getMessages = async (count = 1, date = \"1987-07-18T20:59:26.076557Z\", mode = 1, mode2 = 1) => {\r\n    let respone = await fetch(`http://localhost:8000/users/rooms/${string}/${count}/${date}/${mode}`, {\r\n      method: 'GET',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }\r\n    }, [])\r\n    \r\n    let data = await respone.json()\r\n    console.log(data)\r\n    \r\n    // console.log(currentMessages.current)\r\n    // console.log(currentMessages.current[`${string}`])\r\n    \r\n    // Adding messages to currentMessage ref\r\n    addToMessages(data, mode2)\r\n    \r\n    // \r\n    setMessages(currentMessages.current[`${string}`])\r\n    // console.log(\"newest: \" + newestMessage.current[`${string}`].created)\r\n    // console.log(\"oldest: \" + oldestMessage.current[`${string}`].created)\r\n  }\r\n  \r\n  // Function that adds messages to storage and \r\n  // Keep track of newest and oldest messages\r\n  let addToMessages = (data, mode = 1) => {\r\n    \r\n    // Adding new message/s to ref \r\n    // mode 1 adding ms at the beginning of the list\r\n    // mode 2 adding ms at the end of the list\r\n    if (mode == 1)\r\n    {\r\n      currentMessages.current[`${string}`] = [...currentMessages.current[string], ...data];\r\n    }\r\n    else if (mode == 2)\r\n    {\r\n      currentMessages.current[`${string}`] = [...data, ...currentMessages.current[string]];\r\n    }\r\n    \r\n    newestMessage.current[`${string}`] = currentMessages.current[`${string}`][currentMessages.current[`${string}`].length - 1];\r\n    oldestMessage.current[`${string}`] = currentMessages.current[`${string}`][0];\r\n  }\r\n\r\n  \r\n  // Sending messages to djnago\r\n  let sendMessage = async (e) => {\r\n    e.preventDefault()\r\n    // Sending message to websocket\r\n    // And passing friend name from url\r\n    await fetch('http://localhost:8000/users/rooms/send/'+string, {\r\n      method: 'POST',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }, \r\n      body:JSON.stringify(e.target.message.value)\r\n    })\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'message was sent',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n    document.getElementById('mess').value = ''\r\n    \r\n    // Checking if message exist in chatroom\r\n    if (newestMessage.current[`${string}`])\r\n    {\r\n      getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n    }\r\n    else\r\n    {\r\n      getMessages(10, \"321\" ,1)\r\n    }\r\n  }\r\n\r\n  let getCSRFToken = async () => {\r\n    let response = await fetch(`http://localhost:8000/users/get-csrf-token`, {\r\n      method: 'GET',\r\n      headers:{\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Bearer ' + String(authToken.access)\r\n      }\r\n    }, [])\r\n    let data = await response.json()\r\n    // console.log(data)\r\n    return data.csrfToken;\r\n  }\r\n\r\n  let uploadFile = async (e) => {\r\n    // Getting token as far as I know is not currently requierd\r\n    const csrfToken = await getCSRFToken()\r\n    // Getting file from html input\r\n    const file = e.target.files[0];\r\n\r\n    // Creating form object\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('csrfmiddlewaretoken', csrfToken);\r\n\r\n    await fetch('http://localhost:8000/users/rooms/sendfile/'+string, {\r\n      method: 'POST',\r\n      headers:{\r\n        // 'Content-Type':'multipart/form-data',\r\n        'Authorization':'Bearer ' + String(authToken.access),\r\n        'X-CSRFToken': csrfToken\r\n        // 'Access-Control-Allow-Origin': 'origin-or-null / wildcard'\r\n      }, \r\n      body: formData\r\n    })\r\n\r\n    document.getElementById('file_input').value = null\r\n\r\n    WebSocket.send(JSON.stringify({\r\n      'message': 'message was sent',\r\n      'friendName': string,\r\n      'type': 'message_update',\r\n    }))\r\n\r\n    getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n  }\r\n\r\n  let downloadFile = (id) => {\r\n    window.open(`http://localhost:8000/users/rooms/download/${id}/${authToken.access}`, '_blank').focus()\r\n  }\r\n\r\n  function pushToStorage(value)\r\n  {\r\n    // Getting values from storage\r\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"))\r\n    // Adding value to array\r\n    array.push(value)\r\n    updates = array\r\n    // Overwrites current session storage with new one\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array))\r\n  }\r\n\r\n  function removeFromStorage(value)\r\n  {\r\n    // getting data from session storage \r\n    let array = JSON.parse(sessionStorage.getItem(\"Updates\"))\r\n    // Getting index value of passed value (param)\r\n    let index = array.indexOf(value)\r\n    // If value exist in list\r\n    if (index > -1)\r\n    {\r\n      // Removing that value from list\r\n      array.splice(index, 1)\r\n    }\r\n    // Updating 'update' list and saving it to session storage too \r\n    updates = array\r\n    sessionStorage.setItem(\"Updates\", JSON.stringify(array))\r\n  }\r\n\r\n  // setTimeout(() => {\r\n  //     const input = document.getElementById(\"mess\");\r\n  //     input.focus();\r\n  //   }, 10);\r\n\r\n  let FileLinkComponent = (message) => {\r\n    // console.log(message.message.file.fileName)\r\n    return (\r\n      <div className='chat_elem'><div className='inline-flex'>{message.message.user.username}: <div className='file_elem' onClick={() => downloadFile(message.message.file.id) }>{message.message.file.fileName}</div></div></div>\r\n    )\r\n  }\r\n\r\n  function MessageForRender()\r\n  {\r\n    if (messages === null)\r\n    {\r\n      return <h1>No Messages</h1>\r\n    }\r\n    else\r\n    {\r\n      return( \r\n        messages.map(f => f.isIncludeFile === false ? (<div className='chat_elem'>{f.user.username}: {f.body}</div>) : (<FileLinkComponent message={f}/>))\r\n      )\r\n    }\r\n  }\r\n\r\n  let handleWs = async (dataa) => {\r\n    // console.log(wsdata)\r\n    if (!dataa)\r\n    {\r\n      return\r\n    }\r\n    let data = dataa\r\n    // Console logging messages for debugging\r\n    // console.log('Data:', data)\r\n    if(data.type === 'friendRequest' && data.friend != user.username)\r\n    {\r\n      window.location.reload()\r\n    }\r\n    // If user recives chat_update prompt and is from a friend \r\n    // whos chatroom is open: update messages \r\n    if(data.type === 'chat_update' && data.friend === string){\r\n      // console.log('chat')\r\n      // 100ms delay is required, for some bizarre reasons\r\n      // if there is no delay, getMessages() works every 3rd time\r\n      setTimeout(() => {\r\n        if (newestMessage.current[`${string}`])\r\n        {\r\n          getMessages(20, newestMessage.current[`${string}`].created, 2)\r\n        }\r\n        else\r\n        {\r\n          getMessages(10, \"321\" ,1)\r\n        }\r\n      }, 300);\r\n      // setMessageRTC(data)\r\n      // isCalling(true)\r\n    }\r\n    else if (!updates.includes(data.friend) && data.friend !== user.username)\r\n    {\r\n        // If friend sent you messages \r\n        // and that friends chatroom wasnt open\r\n        // saving that friend username to update list \r\n        pushToStorage(data.friend);          \r\n    }\r\n    else //if(data.type === \"init_call\" && data.friend === string)\r\n    {\r\n      // console.log(\"Your friends is calling\")\r\n      setMessageRTC(data)\r\n      // isCalling(true)\r\n      // isFcall(true)\r\n    }\r\n  }\r\n  handleWs(asd)\r\n  console.log(asd)\r\n  return (\r\n    <div className='message_container'>\r\n      <div className='message_container_ui'>\r\n        <ConControls data={messageRTC} />\r\n      </div>\r\n      <div className='message_container_chat'>\r\n        <ul className='message_list' ref={containerRef}>\r\n          <MessageForRender  />\r\n        </ul>\r\n        <div className='message_text_input'>\r\n          <form onSubmit={sendMessage} autoComplete=\"off\">\r\n            <input type=\"text\" id='mess' name=\"message\" autoFocus placeholder='type here'/>\r\n            <label id='message_text_input-file' >\r\n              <input type=\"file\" id=\"file_input\" name=\"file\" onChange={uploadFile}/>\r\n              Upload\r\n            </label>\r\n            <button type=\"submit\">Send</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageContainer\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}