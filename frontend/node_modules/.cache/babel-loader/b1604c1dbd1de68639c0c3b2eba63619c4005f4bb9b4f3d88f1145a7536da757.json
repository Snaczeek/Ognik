{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateu\\\\Desktop\\\\OGNIK\\\\Ognik\\\\frontend\\\\src\\\\components\\\\ConControls.js\",\n  _s = $RefreshSig$();\nimport { React, useEffect, useContext, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport CallIcon from \"../assets/phone-call.png\";\nimport CameraIcon from \"../assets/camera.png\";\nimport MicIcon from \"../assets/mic.png\";\nimport PhoneIcon from \"../assets/phone.png\";\nimport EndCall from \"../assets/end-call.png\";\nimport AuthContext from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet localStream;\nlet remoteStream;\nlet peerConnection;\nlet isVisible = false;\nlet is_in_call = false;\nlet friend_call = \"none\";\nlet isCalling = false;\nconst ConControls = _ref => {\n  _s();\n  let {\n    data = null,\n    fcall\n  } = _ref;\n  // Getting username from URL\n  let {\n    username\n  } = useParams();\n  let string = username.toString();\n\n  // const [isVisible, setIsVisible] = useState(false);\n\n  // Getting access to authToken and WebSocket info from AuthContext\n  let {\n    WebSocket,\n    authToken,\n    user\n  } = useContext(AuthContext);\n\n  // !!! prop for sending ice can using webSockets !!!\n\n  // WebSocket.send(JSON.stringify({\n  //     'message': 'message was sent',\n  //     'friendName': string,\n  //     'type': 'init_call',\n  // }))\n\n  const servers = {\n    iceServers: [{\n      urls: ['stun:stun.l.google.com:19302', 'stun:stun2.l.google.com:19302']\n    }]\n  };\n  let setup_ui = async () => {\n    console.log(\"test1\");\n    // Getting UI element    \n    // let callBTN = document.getElementById(\"call-controls\");\n    let button = document.getElementById(\"ConControls-Call-icon\");\n    button.style.visibility = \"hidden\";\n    // Getting chat element\n    let chat = document.getElementsByClassName(\"message_container_chat\")[0];\n    let message_list = document.getElementsByClassName(\"message_list\")[0];\n\n    // Getting video elemnt\n    let user1 = document.getElementById('user-1');\n    let user2 = document.getElementById('user-2');\n\n    // Getting permisson from the user\n    localStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }); // getting problem here\n\n    console.log('test2');\n    let video_container = document.getElementById(\"video_container\");\n    video_container.style.display = \"grid\";\n\n    // Setting up video container style\n    // callBTN.style.display = 'visible';\n    user1.style.visibility = 'visible';\n    user1.style.height = \"100%\";\n    user2.style.visibility = 'visible';\n    user2.style.height = \"100%\";\n    isVisible = true;\n    // Setting up src stream for user 1\n    user1.srcObject = localStream;\n    user1.onloadedmetadata = function (e) {\n      user1.play();\n    };\n\n    // uiNav.style.height = \"50vh\";\n    // chat.style.height = \"45vh\";\n    message_list.style.height = \"50vh\";\n    is_in_call = true;\n  };\n\n  // Changing layout of website\n  let init_call = async () => {\n    friend_call = string;\n    setup_ui();\n    create_offer();\n\n    // alert(\"ended\");\n  };\n\n  let createPeerConnection = async () => {\n    // Creating connection object\n    peerConnection = new RTCPeerConnection(servers);\n\n    // Creating friend's stream object\n    remoteStream = new MediaStream();\n    // Setting html video object to friend's stream\n    document.getElementById('user-2').srcObject = remoteStream;\n    if (!localStream) {\n      localStream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      document.getElementById('user-1').srcObject = localStream;\n    }\n\n    // For every track, tracks are added to localStream (user's stream)\n    localStream.getTracks().forEach(track => {\n      peerConnection.addTrack(track, localStream);\n    });\n\n    // For every track from friend's peer connection, tracks are added to remoteStream (Friend's stream)\n    peerConnection.ontrack = e => {\n      e.streams[0].getTracks().forEach(track => {\n        remoteStream.addTrack(track);\n      });\n    };\n\n    // Debuging\n    peerConnection.onicecandidate = async e => {\n      if (e.candidate) {\n        // console.log('New ICE candidate: ', e.candidate)\n        WebSocket.send(JSON.stringify({\n          'message': e.candidate,\n          'friendName': string,\n          'type': 'candidate'\n        }));\n      }\n    };\n  };\n  let create_offer = async () => {\n    await createPeerConnection();\n    let offer = await peerConnection.createOffer();\n    // sets local descirpiton and also fires of peerConnection.onicecandidate listener\n    await peerConnection.setLocalDescription(offer);\n    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n    await delay(200);\n    WebSocket.send(JSON.stringify({\n      'message': offer,\n      'friendName': string,\n      'type': 'init_call'\n    }));\n    // console.log('Offer: ', offer)\n    // console.log(peerConnection)\n  };\n\n  let create_answer = async offer => {\n    await createPeerConnection();\n    await peerConnection.setRemoteDescription(offer);\n    let answer = await peerConnection.createAnswer();\n    await peerConnection.setLocalDescription(answer);\n\n    // console.log(string)\n    console.log(\"asnwer: |\");\n    console.log(answer);\n    // creating delay to ensure that aswer is created before sending message\n    // if not first init of the call wont work :( (I have absolutely no idea how to fix this)\n    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n    await delay(400);\n    WebSocket.send(JSON.stringify({\n      'message': answer,\n      'friendName': string,\n      'type': 'answer'\n    }));\n  };\n  let addAnswer = async answer => {\n    // console.log(\"tests: \")\n    // console.log(peerConnection)\n    if (!peerConnection.currentRemoteDescription) {\n      // console.log(peerConnection) \n      console.log(peerConnection.currentRemoteDescription);\n      // count++\n      await peerConnection.setRemoteDescription(answer);\n    }\n  };\n  let handleCallFromPeer = async data => {\n    // quick delay hack (not working in this case :( i hate life )\n    // const delay = ms => new Promise(\n    //     resolve => setTimeout(resolve, ms)\n    // );\n    // await delay(300)\n    if (data) {\n      // Debuggin stuff\n      // if (data.friend == string)\n      // {\n      //     console.log(data)\n      // }\n      // If data is type init_call and was send from a friend\n      if (data.type == \"init_call\" && data.friend == string) {\n        // Setting flag that will fire off ui calling prompt\n        isCalling = true;\n        // Getting accept_call button and adding event listener onclick \n        // that will fire of createReqeust function with passed 'data' param\n        let button = document.getElementById(\"call_request_accept_call\");\n        button.addEventListener(\"click\", createRequest);\n        button.myParam = data;\n      }\n      if (data.message.type === \"answer\" && data.friend == string) {\n        // Adding answer\n        addAnswer(data.message);\n        // console.log(\"add_answer\")\n        // console.log(data.message)\n      }\n\n      if (data.type == \"candidate\" && data.friend == string) {\n        // creating delay hack to ensure that create_answer() sends answer object first via websocket\n        // possible fix:\n        // create system where peer has to accept call and this will ensure time buffer betweem adding Ice Candidates and receiving answer object\n        // answer object must be received before adding any Ice Candidates if not Ice Candidates on peer side will be added to null local description (that will throw error)\n        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n        await delay(1000);\n        console.log(\"ice tests\");\n        if (peerConnection) {\n          console.log(peerConnection.remoteDescription);\n          peerConnection.addIceCandidate(data.message);\n          console.log(\"addIceCandidate\");\n        }\n      }\n      if (data.type == \"end_call\" && is_in_call && friend_call == data.friend) {\n        handleUserLeft();\n      }\n    }\n\n    // isCalling(false)\n  };\n\n  // Creating positive answer to call \n  let createRequest = async data => {\n    // Saving friend name that user is in call with to var\n    friend_call = data.currentTarget.myParam.friend;\n    // Changing ui \n    setup_ui();\n    // Creating answer ice object and sending it to a peer \n    create_answer(data.currentTarget.myParam.message);\n\n    // Making ui call request disappear\n    isCalling = false;\n  };\n\n  // TO FIX: object stream bug, in new call\n  let handleUserLeft = async () => {\n    // Getting html element\n    let uiNav = document.getElementsByClassName(\"ConControls\")[0];\n    // Getting whole div that contains input message and list message\n    let chat = document.getElementsByClassName(\"message_container_chat\")[0];\n    // Getting list that contains messages\n    let message_list = document.getElementsByClassName(\"message_list\")[0];\n\n    // Changing back height setting\n    uiNav.style.height = \"auto\";\n    chat.style.height = \"auto\";\n    // Setting message list to 85% of website height\n    message_list.style.height = \"85vh\";\n\n    // Getting html call button (green button that init the call)\n    let button = document.getElementById(\"ConControls-Call-icon\");\n    // Making button visible again\n    button.style.visibility = \"visible\";\n\n    // Making div that contains video objects invisible\n    let video_container = document.getElementById(\"video_container\");\n    video_container.style.display = \"none\";\n\n    // Getting users video objects\n    let user1 = document.getElementById('user-1');\n    let user2 = document.getElementById('user-2');\n\n    // Making them also invinsible \n    user1.style.visibility = 'hidden';\n    user1.style.height = \"0%\";\n    user2.style.visibility = 'hidden';\n    user2.style.height = \"0%\";\n\n    // Setting flags to false\n    isVisible = false;\n    is_in_call = false;\n    isCalling = false;\n\n    // Testing/debuggin/fixing bugs\n\n    // localStream.getTracks().forEach((track) => {\n    //     track.stop();\n    // })\n\n    // For every track, tracks are added to localStream (user's stream)\n\n    // console.log(peerConnection.getSenders())\n    // peerConnection.removeTrack(peerConnection.getSenders()[0])\n\n    // let videoTrack = localStream.getTracks().find(track => track.kind === 'video')\n    // localStream.getTracks().forEach((track) => {\n    //     console.log(track)\n    //     // track.stop();\n    //     localStream.removeTrack(track)\n    // })\n\n    // closing peer connection (sets connection to 'close' status, it doesn't destroying connection)\n    peerConnection.close();\n    // Temporary fix to object stream bug\n    window.location.reload();\n    // removeTrack()\n\n    // Sending to peer 'end_call' prompt\n    WebSocket.send(JSON.stringify({\n      'message': 'end call',\n      'friendName': string,\n      'type': 'end_call'\n    }));\n  };\n\n  // Denying incoming call\n  let deny_call = () => {\n    isCalling = false;\n\n    // Sending to peer 'end_call' prompt \n    WebSocket.send(JSON.stringify({\n      'message': 'end call',\n      'friendName': string,\n      'type': 'end_call'\n    }));\n  };\n\n  // Toggle user's stream camera\n  let toggle_camera = async () => {\n    // Getting user's stream object\n    let videoTrack = localStream.getTracks().find(track => track.kind === 'video');\n    if (videoTrack.enabled) {\n      // Disabling video src\n      videoTrack.enabled = false;\n      // Setting background color of button to red\n      document.getElementById('camera_btn').style.backgroundColor = 'rgb(255, 80, 80)';\n    } else {\n      // Enabling video src\n      videoTrack.enabled = true;\n      // Setting background color of button to blue\n      document.getElementById('camera_btn').style.backgroundColor = 'rgb(102, 153, 255, .8)';\n    }\n  };\n\n  // Taggle user's stream audio\n  let toggle_audio = async () => {\n    // Getting user's stream object\n    let audioTrack = localStream.getTracks().find(track => track.kind === 'audio');\n    if (audioTrack.enabled) {\n      // Disabling audio src\n      audioTrack.enabled = false;\n      // Changing button background to red\n      document.getElementById('mic_btn').style.backgroundColor = 'rgb(255, 80, 80)';\n    } else {\n      // Enabling audio src\n      audioTrack.enabled = true;\n      // Changing button background to blue\n      document.getElementById('mic_btn').style.backgroundColor = 'rgb(102, 153, 255, .8)';\n    }\n  };\n  useEffect(() => {\n    // Adding event listenr that checks if user refreshed/close tab\n    window.addEventListener('beforeunload', handleUserLeft);\n    // if(is_in_call === true)\n    // {\n    //     init_call()\n    // }\n    // else\n    // {\n    //     // Getting UI element    \n    //     let uiNav = document.getElementsByClassName(\"ConControls\")[0];\n    //     // Getting chat element\n    //     let chat = document.getElementsByClassName(\"message_container_chat\")[0];\n    //     let message_list = document.getElementsByClassName(\"message_list\")[0];\n    //     uiNav.style.height = \"auto\";\n    //     chat.style.height = \"auto\";\n    //     message_list.style.height = \"85vh\";\n    // }\n    // // setup_ui()\n\n    // setIsVisible(false)\n  }, []);\n\n  // Logic for handling incoming call\n  handleCallFromPeer(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_uivideo_con\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ConControls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ConControls-friendname\",\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ConControls-Call-icon\",\n        onClick: init_call,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: CallIcon,\n          alt: \"call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video_container\",\n      id: \"video_container\",\n      hidden: true,\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        class: \"video-player\",\n        id: \"user-1\",\n        autoPlay: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        class: \"video-player\",\n        id: \"user-2\",\n        autoPlay: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isCalling ? 'visible' : 'hidden',\n      id: \"call_request\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"call_request_text\",\n        children: [string, \" is calling you!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"call_request_controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-container\",\n          id: \"call_request_accept_call\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: PhoneIcon,\n            alt: \"accept_call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-container\",\n          id: \"leave_btn\",\n          onClick: deny_call,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: EndCall,\n            alt: \"deny_call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isVisible ? 'visible' : 'hidden',\n      id: \"call_controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"control-container\",\n        id: \"camera_btn\",\n        onClick: toggle_camera,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: CameraIcon,\n          alt: \"camera_btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"control-container\",\n        id: \"mic_btn\",\n        onClick: toggle_audio,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: MicIcon,\n          alt: \"microphone_btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"control-container\",\n        id: \"leave_btn\",\n        onClick: handleUserLeft,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: PhoneIcon,\n          alt: \"leave_btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 9\n  }, this);\n};\n_s(ConControls, \"wRsBUVphty9jsNXoUi8lWZzvOqQ=\", false, function () {\n  return [useParams];\n});\n_c = ConControls;\nexport default ConControls;\nvar _c;\n$RefreshReg$(_c, \"ConControls\");","map":{"version":3,"names":["React","useEffect","useContext","useState","useParams","CallIcon","CameraIcon","MicIcon","PhoneIcon","EndCall","AuthContext","localStream","remoteStream","peerConnection","isVisible","is_in_call","friend_call","isCalling","ConControls","data","fcall","username","string","toString","WebSocket","authToken","user","servers","iceServers","urls","setup_ui","console","log","button","document","getElementById","style","visibility","chat","getElementsByClassName","message_list","user1","user2","navigator","mediaDevices","getUserMedia","video","audio","video_container","display","height","srcObject","onloadedmetadata","e","play","init_call","create_offer","createPeerConnection","RTCPeerConnection","MediaStream","getTracks","forEach","track","addTrack","ontrack","streams","onicecandidate","candidate","send","JSON","stringify","offer","createOffer","setLocalDescription","delay","ms","Promise","resolve","setTimeout","create_answer","setRemoteDescription","answer","createAnswer","addAnswer","currentRemoteDescription","handleCallFromPeer","type","friend","addEventListener","createRequest","myParam","message","remoteDescription","addIceCandidate","handleUserLeft","currentTarget","uiNav","close","window","location","reload","deny_call","toggle_camera","videoTrack","find","kind","enabled","backgroundColor","toggle_audio","audioTrack"],"sources":["C:/Users/mateu/Desktop/OGNIK/Ognik/frontend/src/components/ConControls.js"],"sourcesContent":["import {React, useEffect, useContext, useState} from 'react'\r\nimport {  useParams } from \"react-router-dom\";\r\nimport CallIcon from \"../assets/phone-call.png\"\r\nimport CameraIcon from \"../assets/camera.png\"\r\nimport MicIcon from \"../assets/mic.png\"\r\nimport PhoneIcon from \"../assets/phone.png\"\r\nimport EndCall from \"../assets/end-call.png\"\r\nimport AuthContext from '../context/AuthContext'\r\n\r\nlet localStream;\r\nlet remoteStream;\r\nlet peerConnection\r\nlet isVisible = false\r\nlet is_in_call = false;\r\nlet friend_call = \"none\"\r\nlet isCalling = false\r\n\r\nconst ConControls = ({data = null, fcall}) => {\r\n    // Getting username from URL\r\n    let { username } = useParams();\r\n    let string = username.toString();\r\n\r\n    // const [isVisible, setIsVisible] = useState(false);\r\n\r\n    // Getting access to authToken and WebSocket info from AuthContext\r\n    let { WebSocket, authToken, user} = useContext(AuthContext)\r\n\r\n    // !!! prop for sending ice can using webSockets !!!\r\n    \r\n    // WebSocket.send(JSON.stringify({\r\n    //     'message': 'message was sent',\r\n    //     'friendName': string,\r\n    //     'type': 'init_call',\r\n    // }))\r\n\r\n\r\n\r\n    const servers = \r\n    {\r\n        iceServers:[\r\n            {\r\n                urls:['stun:stun.l.google.com:19302', 'stun:stun2.l.google.com:19302']\r\n            }\r\n        ]\r\n    } \r\n    \r\n\r\n    let setup_ui = async () => {\r\n        console.log(\"test1\")\r\n        // Getting UI element    \r\n        // let callBTN = document.getElementById(\"call-controls\");\r\n        let button = document.getElementById(\"ConControls-Call-icon\");\r\n        button.style.visibility = \"hidden\";\r\n        // Getting chat element\r\n        let chat = document.getElementsByClassName(\"message_container_chat\")[0];\r\n        let message_list = document.getElementsByClassName(\"message_list\")[0];\r\n        \r\n        // Getting video elemnt\r\n        let user1 = document.getElementById('user-1');\r\n        let user2 = document.getElementById('user-2');\r\n\r\n        // Getting permisson from the user\r\n        localStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true}); // getting problem here\r\n\r\n        console.log('test2')\r\n\r\n        let video_container = document.getElementById(\"video_container\");\r\n        video_container.style.display = \"grid\"\r\n\r\n        // Setting up video container style\r\n        // callBTN.style.display = 'visible';\r\n        user1.style.visibility = 'visible';\r\n        user1.style.height = \"100%\";\r\n        user2.style.visibility = 'visible';\r\n        user2.style.height = \"100%\";\r\n        isVisible = true\r\n        // Setting up src stream for user 1\r\n        user1.srcObject = localStream;\r\n        \r\n        user1.onloadedmetadata = function(e) {\r\n            user1.play();\r\n        };\r\n\r\n        // uiNav.style.height = \"50vh\";\r\n        // chat.style.height = \"45vh\";\r\n        message_list.style.height = \"50vh\";\r\n\r\n        is_in_call = true;\r\n    }\r\n\r\n    // Changing layout of website\r\n    let init_call = async () =>\r\n    {\r\n        friend_call = string\r\n        setup_ui()\r\n\r\n        create_offer()\r\n        \r\n        // alert(\"ended\");\r\n    }\r\n\r\n    let createPeerConnection = async () => {\r\n        // Creating connection object\r\n        peerConnection = new RTCPeerConnection(servers)\r\n\r\n        // Creating friend's stream object\r\n        remoteStream = new MediaStream()\r\n        // Setting html video object to friend's stream\r\n        document.getElementById('user-2').srcObject = remoteStream;\r\n\r\n        if(!localStream){\r\n            localStream = await navigator.mediaDevices.getUserMedia({video:true, audio:true})\r\n            document.getElementById('user-1').srcObject = localStream\r\n        }\r\n\r\n        // For every track, tracks are added to localStream (user's stream)\r\n        localStream.getTracks().forEach((track) => {\r\n            peerConnection.addTrack(track, localStream)\r\n        })\r\n\r\n        // For every track from friend's peer connection, tracks are added to remoteStream (Friend's stream)\r\n        peerConnection.ontrack = (e) => {\r\n            e.streams[0].getTracks().forEach((track) => {\r\n                remoteStream.addTrack(track)\r\n            })\r\n        }\r\n\r\n        // Debuging\r\n        peerConnection.onicecandidate = async (e) => {\r\n            if(e.candidate){\r\n                // console.log('New ICE candidate: ', e.candidate)\r\n                WebSocket.send(JSON.stringify({\r\n                    'message': e.candidate,\r\n                    'friendName': string,\r\n                    'type': 'candidate',\r\n                }))\r\n            }\r\n        }\r\n    }\r\n\r\n    let create_offer = async () => \r\n    {\r\n        await createPeerConnection()\r\n\r\n        let offer = await peerConnection.createOffer()\r\n        // sets local descirpiton and also fires of peerConnection.onicecandidate listener\r\n        await peerConnection.setLocalDescription(offer)\r\n\r\n        const delay = ms => new Promise(\r\n            resolve => setTimeout(resolve, ms)\r\n        );\r\n        await delay(200)\r\n\r\n        WebSocket.send(JSON.stringify({\r\n            'message': offer,\r\n            'friendName': string,\r\n            'type': 'init_call',\r\n        }))\r\n        // console.log('Offer: ', offer)\r\n        // console.log(peerConnection)\r\n    }\r\n\r\n    let create_answer = async (offer) => {\r\n        await createPeerConnection()\r\n\r\n        await peerConnection.setRemoteDescription(offer)\r\n\r\n        let answer = await peerConnection.createAnswer()\r\n        await peerConnection.setLocalDescription(answer)\r\n\r\n        // console.log(string)\r\n        console.log(\"asnwer: |\")\r\n        console.log(answer)\r\n        // creating delay to ensure that aswer is created before sending message\r\n        // if not first init of the call wont work :( (I have absolutely no idea how to fix this)\r\n        const delay = ms => new Promise(\r\n            resolve => setTimeout(resolve, ms)\r\n        );\r\n        await delay(400)\r\n        WebSocket.send(JSON.stringify({\r\n            'message': answer,\r\n            'friendName': string,\r\n            'type': 'answer',\r\n        }))\r\n\r\n    }\r\n\r\n    let addAnswer = async (answer) => {\r\n        // console.log(\"tests: \")\r\n        // console.log(peerConnection)\r\n        if (!peerConnection.currentRemoteDescription) {\r\n            // console.log(peerConnection) \r\n            console.log(peerConnection.currentRemoteDescription)\r\n            // count++\r\n            await peerConnection.setRemoteDescription(answer);\r\n        }\r\n      };\r\n\r\n    let handleCallFromPeer = async (data) => {\r\n        // quick delay hack (not working in this case :( i hate life )\r\n        // const delay = ms => new Promise(\r\n        //     resolve => setTimeout(resolve, ms)\r\n        // );\r\n        // await delay(300)\r\n        if (data)\r\n        {\r\n            // Debuggin stuff\r\n            // if (data.friend == string)\r\n            // {\r\n            //     console.log(data)\r\n            // }\r\n            // If data is type init_call and was send from a friend\r\n            if (data.type == \"init_call\" && data.friend == string)\r\n            {\r\n                // Setting flag that will fire off ui calling prompt\r\n                isCalling = true\r\n                // Getting accept_call button and adding event listener onclick \r\n                // that will fire of createReqeust function with passed 'data' param\r\n                let button = document.getElementById(\"call_request_accept_call\")\r\n                button.addEventListener(\"click\", createRequest)\r\n                button.myParam = data\r\n            }\r\n            \r\n            if (data.message.type === \"answer\" && data.friend == string)\r\n            {\r\n                // Adding answer\r\n                addAnswer(data.message)\r\n                // console.log(\"add_answer\")\r\n                // console.log(data.message)\r\n            }\r\n            \r\n            if (data.type == \"candidate\" && data.friend == string)\r\n            {\r\n                // creating delay hack to ensure that create_answer() sends answer object first via websocket\r\n                // possible fix:\r\n                // create system where peer has to accept call and this will ensure time buffer betweem adding Ice Candidates and receiving answer object\r\n                // answer object must be received before adding any Ice Candidates if not Ice Candidates on peer side will be added to null local description (that will throw error)\r\n                const delay = ms => new Promise(\r\n                    resolve => setTimeout(resolve, ms)\r\n                );\r\n                await delay(1000)\r\n                console.log(\"ice tests\")\r\n                if(peerConnection){\r\n                    console.log(peerConnection.remoteDescription)\r\n                    peerConnection.addIceCandidate(data.message)\r\n\r\n                    console.log(\"addIceCandidate\")\r\n                }\r\n            }\r\n\r\n            if (data.type == \"end_call\" && is_in_call && friend_call == data.friend)\r\n            {\r\n                handleUserLeft()\r\n            }\r\n        }\r\n\r\n        // isCalling(false)\r\n    }\r\n    \r\n    // Creating positive answer to call \r\n    let createRequest = async (data) => {\r\n\r\n        // Saving friend name that user is in call with to var\r\n        friend_call = data.currentTarget.myParam.friend\r\n        // Changing ui \r\n        setup_ui()\r\n        // Creating answer ice object and sending it to a peer \r\n        create_answer(data.currentTarget.myParam.message)\r\n        \r\n        // Making ui call request disappear\r\n        isCalling = false\r\n    }\r\n\r\n    // TO FIX: object stream bug, in new call\r\n    let handleUserLeft = async () => {\r\n        \r\n        // Getting html element\r\n        let uiNav = document.getElementsByClassName(\"ConControls\")[0];\r\n        // Getting whole div that contains input message and list message\r\n        let chat = document.getElementsByClassName(\"message_container_chat\")[0];\r\n        // Getting list that contains messages\r\n        let message_list = document.getElementsByClassName(\"message_list\")[0];\r\n\r\n        // Changing back height setting\r\n        uiNav.style.height = \"auto\";\r\n        chat.style.height = \"auto\";\r\n        // Setting message list to 85% of website height\r\n        message_list.style.height = \"85vh\";\r\n        \r\n        // Getting html call button (green button that init the call)\r\n        let button = document.getElementById(\"ConControls-Call-icon\");\r\n        // Making button visible again\r\n        button.style.visibility = \"visible\";\r\n        \r\n        // Making div that contains video objects invisible\r\n        let video_container = document.getElementById(\"video_container\");\r\n        video_container.style.display = \"none\"\r\n        \r\n        // Getting users video objects\r\n        let user1 = document.getElementById('user-1');\r\n        let user2 = document.getElementById('user-2');\r\n        \r\n        // Making them also invinsible \r\n        user1.style.visibility = 'hidden';\r\n        user1.style.height = \"0%\";\r\n        user2.style.visibility = 'hidden';\r\n        user2.style.height = \"0%\";\r\n        \r\n        // Setting flags to false\r\n        isVisible = false\r\n        is_in_call = false\r\n        isCalling = false\r\n        \r\n        // Testing/debuggin/fixing bugs\r\n\r\n        // localStream.getTracks().forEach((track) => {\r\n            //     track.stop();\r\n            // })\r\n\r\n        // For every track, tracks are added to localStream (user's stream)\r\n        \r\n    \r\n        // console.log(peerConnection.getSenders())\r\n        // peerConnection.removeTrack(peerConnection.getSenders()[0])\r\n\r\n        // let videoTrack = localStream.getTracks().find(track => track.kind === 'video')\r\n        // localStream.getTracks().forEach((track) => {\r\n        //     console.log(track)\r\n        //     // track.stop();\r\n        //     localStream.removeTrack(track)\r\n        // })\r\n\r\n        // closing peer connection (sets connection to 'close' status, it doesn't destroying connection)\r\n        peerConnection.close()\r\n        // Temporary fix to object stream bug\r\n        window.location.reload()\r\n        // removeTrack()\r\n        \r\n        // Sending to peer 'end_call' prompt\r\n        WebSocket.send(JSON.stringify({\r\n            'message': 'end call',\r\n            'friendName': string,\r\n            'type': 'end_call',\r\n        }))\r\n    }\r\n\r\n    // Denying incoming call\r\n    let deny_call = () => {\r\n        isCalling = false\r\n\r\n        // Sending to peer 'end_call' prompt \r\n        WebSocket.send(JSON.stringify({\r\n            'message': 'end call',\r\n            'friendName': string,\r\n            'type': 'end_call',\r\n        }))\r\n    }\r\n\r\n    // Toggle user's stream camera\r\n    let toggle_camera = async () => {\r\n        // Getting user's stream object\r\n        let videoTrack = localStream.getTracks().find(track => track.kind === 'video')\r\n\r\n        if (videoTrack.enabled)\r\n        {\r\n            // Disabling video src\r\n            videoTrack.enabled = false\r\n            // Setting background color of button to red\r\n            document.getElementById('camera_btn').style.backgroundColor = 'rgb(255, 80, 80)'\r\n        }\r\n        else\r\n        {\r\n            // Enabling video src\r\n            videoTrack.enabled = true\r\n            // Setting background color of button to blue\r\n            document.getElementById('camera_btn').style.backgroundColor = 'rgb(102, 153, 255, .8)'\r\n        }\r\n    }\r\n\r\n    // Taggle user's stream audio\r\n    let toggle_audio = async () => {\r\n        // Getting user's stream object\r\n        let audioTrack = localStream.getTracks().find(track => track.kind === 'audio')\r\n\r\n        if (audioTrack.enabled)\r\n        {\r\n            // Disabling audio src\r\n            audioTrack.enabled = false\r\n            // Changing button background to red\r\n            document.getElementById('mic_btn').style.backgroundColor = 'rgb(255, 80, 80)'\r\n        }\r\n        else\r\n        {\r\n            // Enabling audio src\r\n            audioTrack.enabled = true\r\n            // Changing button background to blue\r\n            document.getElementById('mic_btn').style.backgroundColor = 'rgb(102, 153, 255, .8)'\r\n        }\r\n    }\r\n    \r\n    \r\n    useEffect(()=> {\r\n        // Adding event listenr that checks if user refreshed/close tab\r\n        window.addEventListener('beforeunload', handleUserLeft)\r\n        // if(is_in_call === true)\r\n        // {\r\n        //     init_call()\r\n        // }\r\n        // else\r\n        // {\r\n        //     // Getting UI element    \r\n        //     let uiNav = document.getElementsByClassName(\"ConControls\")[0];\r\n        //     // Getting chat element\r\n        //     let chat = document.getElementsByClassName(\"message_container_chat\")[0];\r\n        //     let message_list = document.getElementsByClassName(\"message_list\")[0];\r\n        //     uiNav.style.height = \"auto\";\r\n        //     chat.style.height = \"auto\";\r\n        //     message_list.style.height = \"85vh\";\r\n        // }\r\n        // // setup_ui()\r\n\r\n        // setIsVisible(false)\r\n    }, [])\r\n\r\n    // Logic for handling incoming call\r\n    handleCallFromPeer(data)\r\n    \r\n    return (\r\n        <div className='main_uivideo_con'>\r\n            <div className='ConControls'>\r\n                <div id='ConControls-friendname'>{username}</div>\r\n                <div id='ConControls-Call-icon' onClick={init_call}><img src={CallIcon} alt=\"call\"/></div>\r\n            </div>\r\n            <div className='video_container' id='video_container' hidden>\r\n                <video class=\"video-player\" id='user-1' autoPlay playsInline ></video>\r\n                <video class=\"video-player\" id='user-2' autoPlay playsInline ></video>\r\n            </div>\r\n            <div className={isCalling ? 'visible' : 'hidden'} id='call_request'>\r\n                <div id='call_request_text'>\r\n                    {string} is calling you!\r\n                </div>\r\n                <div id='call_request_controls'>\r\n                    <div className='control-container' id='call_request_accept_call'>\r\n                        <img src={PhoneIcon} alt='accept_call' />\r\n                    </div>\r\n                    <div className='control-container' id='leave_btn' onClick={deny_call}>\r\n                        <img src={EndCall} alt='deny_call'/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={isVisible ? 'visible' : 'hidden'} id='call_controls'>\r\n                <div class=\"control-container\" id=\"camera_btn\" onClick={toggle_camera}>\r\n                    <img src={CameraIcon} alt='camera_btn' />\r\n                </div>\r\n                <div class=\"control-container\" id=\"mic_btn\" onClick={toggle_audio}>\r\n                    <img src={MicIcon} alt='microphone_btn' />\r\n                </div>\r\n                <div class=\"control-container\" id=\"leave_btn\" onClick={handleUserLeft}>\r\n                    <img src={PhoneIcon} alt='leave_btn' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConControls"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}